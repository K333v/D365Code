public class EI_VoucherConsumptionHelper
{
    public static str encryptPass(str _pass)
    {
        str                     str64;
        System.Byte[]           byte;
        System.Text.Encoding    encoding = System.Text.Encoding::get_UTF8();
        ;

        byte = encoding.GetBytes("Cosmos:"+_pass);
        str64 = System.Convert::ToBase64String(byte);

        return str64;
    }

    static str decryptPass(str  _pass)
    {
        str                     str64;
        System.Byte[]           byte;
        System.Text.Encoding    encoding = System.Text.Encoding::get_UTF8();
        container               splitpass;
        ;

        byte = System.Convert::FromBase64String(_pass);
        str64 = encoding.GetString(byte);
        splitpass = str2con_RU(str64,':');

        return conPeek(splitpass,2);
    }

    public static boolean validateUser(ProjId  _ProjId)
    {
        HcmWorker               hcmWorker;
        UserId                  userId = curUserId();
        ProjValEmplProjSetup    projValForProjId,
                                projValForWorker;
        boolean                 ret;
        ResourceRecId           resourceRecId;

        hcmWorker = hcmWorker::find(DirPersonUserEx::findUserWorkerReference(userId));
        if(hcmWorker)
        {
            resourceRecId = ResourceFacade::findByWorker(hcmWorker.RecId);

            if(resourceRecId)
            {
                select firstOnly projValForProjId
                    where projValForProjId.Projid == _ProjId
                    && projValForProjId.Resource == resourceRecId;
                 
                /*select firstonly projValForWorker
                    where projValForWorker.Resource == resourceRecId
                    && projValForWorker.GroupId == projValForProjId.GroupId;*/

                if(projValForProjId)
                {
                    ret = true;
                }
                else
                {
                    ret = ret & checkFailed("@EIP261:AX0209_0037");
                }
            }
            else
            {
                ret = ret & checkfailed(strFmt("@EIP261:AX0209_0038",_ProjId));
            }
        }
        else
        {
            ret = ret & checkFailed(strFmt("@EIP261:AX0209_0039",userId));
        }
        return ret;
    }

    public static boolean validateRut(EI_RUT _rut)
    {
        container   cadRut;
        boolean     ret;
        str         Cad1;
        
        cadrut = str2con_RU(_rut,'-');
        if(conLen(cadrut)!=2)
        {
            ret = Ret & checkFailed("@EIP261:AX0209_0084");
        }
        else
        {
            Cad1 = conPeek(cadRut,1);
            if(strFind(Cad1,'.',1,1))
            ret = ret & checkFailed("@EIP261:AX0209_0085");
            else
            {
                if(EI_ValidateRUT::validate(Cad1))
                {
                    if(EI_ValidateRUT::calculate(str2int(Cad1)) == conPeek(cadRut,2))
                    ret = true;
                    else
                    {
                        ret = ret & checkFailed("@EIP261:AX0209_0086");
                    }
                }
            }
        }
        return ret;
    }

    public static str getRutfromQr(EI_QRCode _qrScan)
    {
        str         sept;
        container   listRut;
        int         pos = 0;

        if (strLen(_qrScan) > 100)
        {
            if (subStr(_qrScan,1,5) == "Https")
            {
                if(strFind(_qrScan,'¿',1,strLen(_qrScan)))
                {
                    sept = '¿';
                }
                else if(strFind(_qrScan,'¡',1,strLen(_qrScan)))
                {
                    sept = '¡';
                }
                else
                {
                    throw error("@EIP261:AX0209_0074");
                }

                listRut = str2con_RU(_qrScan,sept);
                sept = conPeek(listRut,2);
                listRut = conNull();
                listrut = str2con_RU(sept,@"'");
                sept = conPeek(listrut,1) + '-'+ subStr(conPeek(listrut,2),1,1);
            }
            else
            {
                if (subStr(_qrScan,9,1) == " ")
                {
                    sept = subStr(_qrScan,1,7) + "-" + sept + subStr(_qrScan,8,1);
                }
                else
                {
                    sept = subStr(_qrScan,1,8) + "-" + sept + subStr(_qrScan,9,1);
                }
            }
        }

        return sept;
    }

    public static boolean existUserInGroup(UserGroupId _cgroupId, userId _userId = curUserId())
    {
        UserGroupList       userGroupList;
        boolean             ret = false;

        if (_cgroupId)
        {
            while select GroupId from userGroupList
            where userGroupList.UserId == _userId
            {
                If (userGroupList.GroupId == _cgroupId)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

    public static void updateStatus(EI_VoucherConsumption   _header)
    {
        EI_VoucherConsumptionLine  lines;

        ttsBegin;
        while select forupdate lines
            where lines.IdVoucherConsumption == _header.IdVoucherConsumption
            && lines.Status == EI_StatusVoucherComsumption::Pending
        {
            lines.Status = EI_StatusVoucherComsumption::noRegister;
            lines.update();
        }
        ttsCommit;

        //<Cambio EA : 26Ene2021>
        select firstOnly lines
            where lines.IdVoucherConsumption == _header.IdVoucherConsumption
            && (lines.Status == EI_StatusVoucherComsumption::PartialRegister ||
            lines.Status == EI_StatusVoucherComsumption::noRegister ||
            lines.Status == EI_StatusVoucherComsumption::Pending);
        //</Cambio EA : 26Ene2021>

        _header.selectForUpdate(true);

        if(lines)
        {
            _header.Status = EI_StatusVoucherComsumption::noRegister;
        }
        else
        {
            _header.Status = EI_StatusVoucherComsumption::Register;
        }

        ttsBegin;
        _header.update();
        ttscommit;
    }

    public static boolean registerVoucher(EI_VoucherConsumption _header)
    {
        boolean                         ret;
        ProjParameters                  ProjParameters = ProjParameters::find();
        EI_VoucherConsumptionLine       lines;
        SalesLine                       SalesLine;
        SalesTable                      SalesTable;
        container                       linesforJour, qtys, lines0Stock;
        Qty                             QtyforSend, qtyPhy, QtyforReq, PhysicalOnhand;
        salesFormLetter                 salesFormLetter;
        boolean                         Itemreq, insJournal;
        InventJournalTable              InventJournalTable;
        InventJournalTrans              InventJournalTrans;
        inventJournalName               inventJournalName;
        int                             i;
        recid                           recid;
        InventDim                       inventdim, inventD;
        InventDimId                     ProjInventDimId;
        ProjTable                       ProjTable;
        journalCheckPost                journalCheckPost;
        EI_VoucherConsumptionPostLog    voucherConsumptionPostLog;
        InventSum                       InventSum;
        InventSumRecalcItem             InventSumRecalcItem;
        EI_DigitalWarehouseParameters   dwParameters = EI_DigitalWarehouseParameters::find();
        InventTransOrigin               inventTransOrigin;
        InventTrans                     inventTrans;
        //EI_StatusVoucherComsumption   StatusVComsump_req = EI_StatusVoucherComsumption::Register;
        
        #define.DefaultProjLinePropertyId("NO_FACTURA")

        ProjTable = ProjTable::find(_header.ProjId);
        
        if(_header.isMultiproject)
        {
            inventdim.clear();
            inventdim = InventDim::find(_header.InventDimId);
        }
        else
        {     
            if(ProjTable.EI_InventSiteId)
            {
                inventdim.clear();
                inventdim.InventSiteId = ProjTable.EI_InventSiteId;
                inventdim.InventLocationId = _header.InventLocationId;
                inventdim= inventdim::findOrCreate(inventdim);
            }
        }
        //<Crear requisitos de artículo para reservar una cantidad de material>
        linesforJour = conNull();
        if(ProjParameters.CreateItemReqForPO)
        {
            //<Start Lines>
            while select ForUpdate lines index hint IdxVoucherConsumption
            where lines.IdVoucherConsumption == _header.IdVoucherConsumption
            && lines.IsSign == NoYes::Yes
            && lines.Status == EI_StatusVoucherComsumption::Pending
            {
                Itemreq = false;
                QtyforSend = lines.Qty - lines.QtyReg;
                QtyforReq = 0;

                InventSumRecalcItem = new  InventSumRecalcItem(lines.ItemId, false, checkfix::fix);
                InventSumRecalcItem.updatenow();
                try
                {
                    ttsBegin;
                    //<Start SalesLine>
                    while select forupdate SalesLine
                        where SalesLine.ProjId == _header.ProjId
                        && SalesLine.ItemId == lines.ItemId
                        && SalesLine.SalesStatus == SalesStatus::Backorder
                        && SalesLine.RemainInventPhysical != 0
                        join InventD
                        where InventD.inventDimId == SalesLine.InventDimId
                        && InventD.InventLocationId == _header.InventLocationId
                        join inventTransOrigin
                        where inventTransOrigin.InventTransId == SalesLine.InventTransId
                        join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.StatusIssue == StatusIssue::ReservPhysical
                    {
                        if(QtyforSend==0)
                        break;

                        //Verificar el disponible antes de registrar el artículo requerido
                        qtyPhy = 0;
                        while select InventSum
                            join InventD 
                            where InventSum.ItemId == lines.ItemId
                            && InventSum.InventSiteId == inventdim.InventSiteId
                            && InventSum.InventLocationId == inventdim.InventLocationId
                            && InventD.inventDimId == InventSum.InventDimId
                        {
                            qtyPhy += InventSum.physicalInventCalculated();
                        }

                        if(qtyPhy)
                        {
                            //<clear SalesDeliverNow for others lines>
                            EI_VoucherConsumptionHelper::clearActualSalesLines(salesLine.SalesId);
                            SalesLine.reread();
                            //lines.selectForUpdate(true);
                            //</clear SalesDeliverNow for others lines>

                            if(qtyPhy < SalesLine.RemainInventPhysical)
                            {
                                if(qtyPhy >= QtyforSend)
                                {
                                    SalesLine.SalesDeliverNow = QtyforSend;
                                }
                                else
                                {
                                    SalesLine.SalesDeliverNow = qtyPhy;

                                }
                            }
                            else if(SalesLine.RemainInventPhysical >= QtyforSend)
                            {

                                SalesLine.SalesDeliverNow = QtyforSend;
                            }
                            else
                            {
                                SalesLine.SalesDeliverNow = SalesLine.RemainInventPhysical;
                            }

                            salesLine.setInventDeliverNow();
                            salesLine.doUpdate();

                            SalesTable = SalesLine.salesTable(true);
                            if(SalesTable.EI_SalesPackingType == '')
                            {
                                SalesTable.EI_SalesPackingType = dwParameters.SalesPackingType;
                                SalesTable.doUpdate();
                            }

                            salesFormLetter = SalesFormLetter::construct(DocumentStatus::ProjectPackingSlip);
                            salesFormLetter.update(salesTable, SystemDateGet(),SalesUpdate::DeliverNow, AccountOrder::None, false, false,false);

                            SalesTable.reread();

                            voucherConsumptionPostLog.clear();
                            voucherConsumptionPostLog.IdVoucherConsumption =   _header.IdVoucherConsumption;
                            voucherConsumptionPostLog.PackingSlipId = salesTable.EI_LastPackingSlip();
                            voucherConsumptionPostLog.Qty = SalesLine.SalesDeliverNow;
                            voucherConsumptionPostLog.Status = EI_StatusVoucherComsumption::Register;
                            voucherConsumptionPostLog.ItemId = lines.ItemId;
                            voucherConsumptionPostLog.LineRecId = lines.recid;
                            voucherConsumptionPostLog.insert();

                            //<Cambio EA 04Oct2021>
                            EI_VoucherConsumptionHelper::insertLog(lines);
                            //</Cambio EA 04Oct2021>

                            lines.QtyReg += SalesLine.SalesDeliverNow;
                            lines.Status = EI_StatusVoucherComsumption::PartialRegister;
                            lines.update();

                            EI_InventTransHelper::updateFromSalesPacking(voucherConsumptionPostLog.PackingSlipId, lines);

                            ProjInventDimId = EI_VoucherConsumptionHelper::getLocation(lines.ItemId, inventdim.InventSiteId, inventdim.InventLocationId);
                            PhysicalOnhand = EI_VoucherConsumptionHelper::getPhysicalOnhand(lines.ItemId, ProjInventDimId);

                            QtyforReq  += SalesLine.SalesDeliverNow;
                            QtyforSend -= SalesLine.SalesDeliverNow;
                            if(!QtyforSend || PhysicalOnhand == 0)
                            {
                                if (lines.QtyReg >= lines.Qty)
                                lines.Status = EI_StatusVoucherComsumption::Register;
                                // else
                                //     lines.Status = EI_StatusVoucherComsumption::PartialRegister;

                                lines.update();
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    //<End SalesLine>
                    ttsCommit;
                    Itemreq = true;
                }
                catch(Exception::Error)
                {
                    ttsAbort;

                    ttsBegin;
                    QtyforSend = lines.Qty;
                    if (lines.QtyReg != lines.Qty && lines.QtyReg !=0)
                    lines.Status = EI_StatusVoucherComsumption::PartialRegister;
                    else
                    lines.Status = EI_StatusVoucherComsumption::noRegister;
                    lines.update();
                    ttsCommit;

                    delete_from voucherConsumptionPostLog
                        where voucherConsumptionPostLog.IdVoucherConsumption == _header.IdVoucherConsumption
                        && voucherConsumptionPostLog.Status == EI_StatusVoucherComsumption::noRegister;

                    ret = ret & checkFailed(strFmt("@EIP261:BOD_DIG_0052",_header.IdVoucherConsumption));

                }
                if(!Itemreq || QtyforSend)
                {
                    ProjInventDimId = EI_VoucherConsumptionHelper::getLocation(lines.ItemId, inventdim.InventSiteId, inventdim.InventLocationId);
                    PhysicalOnhand = EI_VoucherConsumptionHelper::getPhysicalOnhand(lines.ItemId, ProjInventDimId);

                    if (PhysicalOnhand == 0)
                    {
                        ret = checkFailed(strFmt("@EIP261:BOD_DIG_0051",lines.ItemId));
                    }
                    else
                    {
                        linesforJour+= lines.RecId;
                        qtys+= QtyforSend;
                    }
                }
                else
                {
                    ret = true;
                }
            }
            lines.reread();
            if(conLen(linesforJour))
            {
                for(i=1;i<=conlen(linesforJour);i++)
                {
                    if(!inventJournalTable)
                    {
                        inventJournalTable.clear();
                        inventJournalName =  InventJournalName::find(
                                    InventJournalName::standardJournalName(InventJournalType::project));
                        inventJournalTable.initFromInventJournalName(InventJournalName);
                        inventJournalTable.insert();
                    }
                    recid = conPeek(linesforJour,i);
                    select forUpdate firstonly lines where lines.RecId == recid;
                    insJournal = true;
                    /* if (!inventTable::find(lines.ItemId).ProjCategoryId)
                {
                    insJournal = checkFailed(strFmt("La línea con el artículo %1 no fue incluida en el diario porque le falta la categoría del proyecto",lines.ItemId));
                }*/

                    inventJournalTrans.clear();

                    inventJournalTrans.initFromInventJournalTable(inventJournalTable);
                    inventJournalTrans.TransDate = systemDateGet();
                    inventJournalTrans.ItemId = lines.ItemId;
                    inventJournalTrans.ProjId = _header.ProjId;
                    InventJournalTrans.EI_IdArea = lines.IdArea;
                    inventJournalTrans.initFromInventTable(InventTable::find(inventJournalTrans.ItemId));
                    inventJournalTrans.initFromProjTable(ProjTable);
                    inventJournalTrans.ProjLinePropertyId = #DefaultProjLinePropertyId;

                    //Agrega DFItem - 01-07-2022 - FC
                    InventJournalTrans.DefaultDimension = EI_VoucherConsumptionHelper::getDFItem(lines.ItemId, InventJournalTrans.DefaultDimension);

                    //Agrega DFItem - 01-07-2022 - FC
                    //<Cambio EA : 04Oct2021>
                    if (dwParameters.ActiveProjCategoryVCA == NoYes::Yes)
                    {
                        inventJournalTrans.ProjCategoryId = lines.ProjCategoryId;
                        //<Cambio EA : 23Junio2022>
                        if (!inventJournalTrans.ProjCategoryId)
                        {
                            InventJournalTrans.ProjCategoryId = EI_VoucherConsumptionHelper::getLastPurchCategory(lines);
                        }
                        //</Cambio EA : 23Junio2022>
                    }
                    else
                    {
                        //<Cambio EA : 23Junio2022>
                        inventJournalTrans.ProjCategoryId = EI_VoucherConsumptionHelper::getLastPurchCategory(lines);
                        //</Cambio EA : 23Junio2022>
                    }
                    //</Cambio EA : 04Oct2021>
                    inventJournalTrans.InventDimId = EI_VoucherConsumptionHelper::getLocation(inventJournalTrans.ItemId, inventdim.InventSiteId, inventdim.InventLocationId);
                    inventJournalTrans.ProjUnitID =  InventTableModule::find(lines.ItemId, ModuleInventPurchSales::Purch).UnitId;

                    PhysicalOnhand = EI_VoucherConsumptionHelper::getAvailPhysical(lines.ItemId,inventJournalTrans.InventDimId);

                    if (PhysicalOnhand == 0)
                    {
                        insJournal = checkFailed(strFmt("@EIP261:BOD_DIG_0051",lines.ItemId));
                    }
                    else
                    {
                        inventJournalTrans.Qty = conPeek(qtys,i);

                        if (PhysicalOnhand < inventJournalTrans.Qty)
                        {
                            inventJournalTrans.Qty = PhysicalOnhand;
                            qtys = conPoke(qtys, i, PhysicalOnhand);
                        }
                    }

                    if (insJournal)
                    {
                        inventJournalTrans.insert();
                    }
                    else
                    {
                        linesforJour = conDel(linesforJour,i,1);
                        qtys = conDel(qtys,i,1);
                        i--;
                        lines0Stock += lines.RecId;
                    }
                }
                if(conLen(linesforJour) <1 && inventJournalTable)
                {
                    inventJournalTable.delete();
                    inventJournalTable.clear();
                }

                delete_from voucherConsumptionPostLog
                    where voucherConsumptionPostLog.IdVoucherConsumption == _header.IdVoucherConsumption
                    && voucherConsumptionPostLog.Status == EI_StatusVoucherComsumption::noRegister;

            }
        }
        else  //<No está activado el parámetro para Crear requisitos de artículo para reservar una cantidad de material>
        {
            ttsBegin;
            while select lines index hint IdxVoucherConsumption
            where lines.IdVoucherConsumption == _header.IdVoucherConsumption
            && lines.Status == EI_StatusVoucherComsumption::Pending
            && lines.IsSign == NoYes::Yes
            {
                if(!inventJournalTable)
                {
                    inventJournalTable.clear();
                    inventJournalName =  InventJournalName::find(
                                InventJournalName::standardJournalName(InventJournalType::project));
                    inventJournalTable.initFromInventJournalName(InventJournalName);
                    inventJournalTable.insert();
                }

                insJournal = true;
                /*
            if (!inventTable::find(lines.ItemId).ProjCategoryId)
            {
                insJournal = checkFailed(strFmt("La línea con el artículo %1 no fue incluida en el diario porque le falta la categoría del proyecto",lines.ItemId));
            }

            */
                inventJournalTrans.clear();
                inventJournalTrans.initFromInventJournalTable(inventJournalTable);
                inventJournalTrans.TransDate = systemDateGet();
                inventJournalTrans.ItemId = lines.ItemId;
                inventJournalTrans.ProjId = _header.ProjId;
                inventJournalTrans.EI_IdArea = lines.IdArea;
                inventJournalTrans.initFromInventTable(InventTable::find(inventJournalTrans.ItemId));
                inventJournalTrans.initFromProjTable(ProjTable);
                inventJournalTrans.ProjLinePropertyId = #DefaultProjLinePropertyId;

                //<Cambio EA : 04Oct2021>
                if (dwParameters.ActiveProjCategoryVCA == NoYes::Yes)
                {
                    inventJournalTrans.ProjCategoryId = lines.ProjCategoryId;
                    //<Cambio EA : 23Junio2022>
                    if (!inventJournalTrans.ProjCategoryId)
                    {
                        InventJournalTrans.ProjCategoryId = EI_VoucherConsumptionHelper::getLastPurchCategory(lines);
                    }
                    //</Cambio EA : 23Junio2022>
                }
                else
                {
                    //<Cambio EA : 23Junio2022>
                    inventJournalTrans.ProjCategoryId = EI_VoucherConsumptionHelper::getLastPurchCategory(lines);
                    //</Cambio EA : 23Junio2022>
                }
                //</Cambio EA : 04Oct2021>
                inventJournalTrans.InventDimId = EI_VoucherConsumptionHelper::getLocation(inventJournalTrans.ItemId, inventdim.InventSiteId, inventdim.InventLocationId);
                inventJournalTrans.ProjUnitID =  InventTableModule::find(lines.ItemId,ModuleInventPurchSales::Purch).UnitId;
                //<Cambio EA : 13dic2020>
                inventJournalTrans.Qty = lines.Qty - lines.QtyReg;
                //</Cambio EA : 13dic2020>

                PhysicalOnhand = EI_VoucherConsumptionHelper::getAvailPhysical(lines.ItemId, inventJournalTrans.InventDimId);

                if (PhysicalOnhand == 0)
                {
                    insJournal = checkFailed(strFmt("@EIP261:BOD_DIG_0051",lines.ItemId));
                }
                else
                {
                    if (PhysicalOnhand < inventJournalTrans.Qty)
                    {
                        inventJournalTrans.Qty = PhysicalOnhand;
                    }
                }

                if (insJournal)
                {
                    inventJournalTrans.insert();
                    linesforJour+= lines.RecId;
                    qtys+= inventJournalTrans.qty;
                }
                else
                {
                    lines0Stock += lines.RecId;
                }
            }
            if(conLen(linesforJour) <1 && inventJournalTable)
            {
                inventJournalTable.delete();
                inventJournalTable.clear();
            }
            ttsCommit;
        }
        ttsBegin;
        for(i=1;i<=conlen(lines0Stock);i++)
        {
            recid = conPeek(linesforJour,i);
            select forUpdate firstonly lines where lines.RecId == recid;
            if (lines)
            {
                lines.Status = EI_StatusVoucherComsumption::noRegister;
                lines.update();
            }
        }
        ttsCommit;
        if(inventJournalTable)
        {
            try
            {
                ttsBegin;
                journalCheckPost = InventJournalCheckPost::newPostJournal(inventJournalTable);
                journalCheckPost.parmThrowCheckFailed(false);
                journalCheckPost.run();
                ttsCommit;
                ret = true;
                inventJournalTable.reread();
                if(inventJournalTable.Posted)
                {
                    ttsBegin;
                    for(i=1;i<=conlen(linesforJour);i++)
                    {
                        recid = conPeek(linesforJour,i);
                        select forUpdate firstonly lines where lines.RecId == recid;
                        if (lines)
                        {
                            lines.QtyReg += conPeek(qtys,i);

                            if (lines.QtyReg >= lines.Qty)
                            lines.Status = EI_StatusVoucherComsumption::Register;
                            else
                            lines.Status = EI_StatusVoucherComsumption::PartialRegister;

                            lines.update();

                            voucherConsumptionPostLog.clear();
                            voucherConsumptionPostLog.IdVoucherConsumption =   _header.IdVoucherConsumption;
                            voucherConsumptionPostLog.InventJournalId = inventJournalTable.JournalId;
                            voucherConsumptionPostLog.ItemId = lines.ItemId;
                            voucherConsumptionPostLog.Qty = conPeek(qtys,i);
                            voucherConsumptionPostLog.status = EI_StatusVoucherComsumption::Register;
                            voucherConsumptionPostLog.LineRecId = lines.recid;
                            voucherConsumptionPostLog.insert();

                            //<Cambio EA 04Oct2021>
                            EI_VoucherConsumptionHelper::insertLog(lines);
                            //</Cambio EA 04Oct2021>
                        }
                    }
                    EI_InventTransHelper::updateFromInventJournalTrans(InventJournalTable.JournalId);
                    ttsCommit;
                }
                else
                {
                    ttsBegin;
                    for(i=1;i<=conlen(linesforJour);i++)
                    {
                        recid = conPeek(linesforJour,i);
                        select forUpdate firstonly lines where lines.RecId == recid;
                        if (lines)
                        {
                            lines.Status = EI_StatusVoucherComsumption::noRegister;
                            lines.update();
                        }
                        voucherConsumptionPostLog.clear();
                        voucherConsumptionPostLog.IdVoucherConsumption =   _header.IdVoucherConsumption;
                        voucherConsumptionPostLog.InventJournalId = inventJournalTable.JournalId;
                        voucherConsumptionPostLog.ItemId = lines.ItemId;
                        voucherConsumptionPostLog.Qty = conPeek(qtys,i);
                        voucherConsumptionPostLog.status = EI_StatusVoucherComsumption::noRegister;
                        voucherConsumptionPostLog.LineRecId = lines.recid;
                        voucherConsumptionPostLog.insert();

                        //<Cambio EA 04Oct2021>
                        EI_VoucherConsumptionHelper::insertLog(lines);
                        //</Cambio EA 04Oct2021>
                    }
                    ttsCommit;
                }


            }
            catch (Exception::Error)
            {
                ttsBegin;
                for(i=1;i<=conlen(linesforJour);i++)
                {
                    recid = conPeek(linesforJour,i);
                    select forUpdate firstonly lines where lines.RecId == recid;
                    if (lines)
                    {
                        lines.Status = EI_StatusVoucherComsumption::noRegister;
                        lines.update();
                    }
                    voucherConsumptionPostLog.clear();
                    voucherConsumptionPostLog.IdVoucherConsumption =   _header.IdVoucherConsumption;
                    voucherConsumptionPostLog.InventJournalId = inventJournalTable.JournalId;
                    voucherConsumptionPostLog.ItemId = lines.ItemId;
                    voucherConsumptionPostLog.Qty = conPeek(qtys,i);
                    voucherConsumptionPostLog.status = EI_StatusVoucherComsumption::noRegister;
                    voucherConsumptionPostLog.LineRecId = lines.recid;
                    voucherConsumptionPostLog.insert();
                }
                ttsCommit;
                ret = ret & checkFailed(strFmt("@EIP261:BOD_DIG_0052",_header.IdVoucherConsumption));
            }
        }

        return ret;
    }

    public static void clearActualSalesLines(SalesId _saledId)
    {
        SalesLine SalesLine;

        update_recordSet SalesLine
            setting SalesDeliverNow = 0
            where SalesLine.SalesId == _saledId &&
            SalesLine.SalesDeliverNow != 0;
    }

    public static InventDimId getLocation(ItemId _itemid, InventSiteId _inventSiteId, InventlocationId _inventlocationId)
    {
        InventSum   InventSum;
        InventDim   InventDim;
        InventDimId InventDimId;

        while select InventSum
            join InventDim
            where InventSum.ItemId == _itemid
            && InventSum.InventSiteId == _inventSiteId
            && InventSum.InventLocationId == _inventlocationId
            && InventDim.inventDimId == InventSum.InventDimId
        {
            if(InventSum.physicalInventCalculated() > 0)
            {
                InventDimId = InventDim.inventDimId;
                break;
            }
        }

        return InventDimId;
    }

    static Qty getPhysicalOnhand(ItemId _itemId, InventDimId _inventDimId)
    {
        InventSum   InventSum;
        InventDim   inventdim;
        Qty         qtyPhy = 0;

        while select InventSum
            join inventdim
            where inventdim.inventDimId == InventSum.InventDimId
            && inventdim.inventDimId == _inventDimId
            && InventSum.ItemId == _itemId
        {
            qtyPhy += InventSum.physicalInventCalculated();
        }

        return qtyPhy;
    }

    public static ProjCategoryId getLastPurchCategory(EI_VoucherConsumptionLine _lines)
    {
        InventTrans     InventTransLP;
        CategoryId      categoryId;
        InventSiteId    defaultInventSiteId;
        InventDim       inventDim;

        select maxOf(RecId) from InventTransLP
        where InventTransLP.ItemId == _lines.ItemId
        && InventTransLP.ProjId == _lines.ProjId
        && (InventTransLP.StatusReceipt == StatusReceipt::Purchased || InventTransLP.StatusReceipt == StatusReceipt::Received);

        categoryId = InventTrans::findRecId(InventTransLP.RecId).ProjCategoryId;

        if(!categoryId)
        {
            InventTransLP.clear();

            select maxOf(RecId) from InventTransLP
            where InventTransLP.ItemId == _lines.ItemId
               && InventTransLP.ProjId == _lines.ProjId
               && (InventTransLP.StatusIssue == StatusIssue::Sold && InventTransLP.ProjCategoryId != "");

            categoryId = InventTrans::findRecId(InventTransLP.RecId).ProjCategoryId;

        }

        if(!categoryId)
        {
            InventTransLP.clear();
            defaultInventSiteId = ProjTable::find(_lines.ProjId).EI_InventSiteId;

            select maxOf(RecId) from InventTransLP
            where InventTransLP.ItemId == _lines.ItemId
                && (InventTransLP.StatusIssue == StatusIssue::Sold && InventTransLP.ProjCategoryId != "")
                || (InventTransLP.StatusReceipt == StatusReceipt::Purchased && InventTransLP.ProjCategoryId != "")
            join inventDim
                where inventDim.inventDimId == InventTransLP.inventDimId
                && inventDim.InventSiteId == defaultInventSiteId;

            categoryId = InventTrans::findRecId(InventTransLP.RecId).ProjCategoryId;
        }

        if(!categoryId)
        {
            categoryId = InventTable::find(_lines.ItemId).projCategoryId;
        }

        return categoryId;
    }

    public static DimensionDefault getDFItem(ItemId _itemid, DimensionDefault _DimensionDefault)
    {
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeValue             dimensionAttributeValue;
        DimensionAttributeValueSetStorage   dimensionAttributeValueSetStorage,dimStorage;
        DimensionStorage                    dimensionStorage;

        DimensionValue                      dimensionValue;
        DimensionDefault                    dimensionDefault;
        InventTable                         InventTable;
        int                                 cont = 0;
        Counter                             i;
        boolean                             sw;
        str                                 item;
        ;

        select forupdate DefaultDimension, ItemId
                      from InventTable
                     where InventTable.ItemId == _itemid;


        dimensionDefault = 0;

        dimstorage = dimensionAttributeValueSetStorage::find(InventTable.DefaultDimension);

        for (i=1 ; i<= dimStorage.elements() ; i++)
        {
            if(strFmt('%1',DimensionAttribute::find(dimStorage.getAttributeByIndex(i)).Name) == 'Item')
            {
                item = dimStorage.getDisplayValueByDimensionAttribute(5637145330);

            }
        }

        if(Item)
        {
            dimensionAttributeValueSetStorage = dimensionAttributeValueSetStorage::find(_DimensionDefault);

            dimensionAttribute = dimensionAttribute::findbyname('Item');
            dimensionAttributeValue = dimensionAttributeValue::findbyDimensionAttributeAndValue(dimensionAttribute, item, false,true);


            if(dimensionAttributeValue)
            {
                dimensionAttributeValueSetStorage.addItem(dimensionAttributeValue);

                dimensionDefault = dimensionAttributeValueSetStorage.save();
            }

        }
        else
        {
            dimensionDefault = _DimensionDefault;
        }


        return dimensionDefault;
    }

    static Qty getAvailPhysical(ItemId _itemId, InventDimId _inventDimId)
    {
        InventSum   InventSum;
        InventDim   inventdim;
        Qty         qtyPhy = 0;

        while select InventSum 
            join inventdim
            where inventdim.inventDimId == InventSum.InventDimId
            && inventdim.inventDimId == _inventDimId
            && InventSum.ItemId == _itemId
        {
            if (InventSum.reservPhysical > 0)
            {
                qtyPhy += abs(InventSum.physicalInventCalculated() - InventSum.reservPhysical);
            }
            else
            {
                qtyPhy += InventSum.physicalInventCalculated();
            }
        }

        return qtyPhy;
    }

    public static void insertLog(EI_VoucherConsumptionLine _lines)
    {
        EI_VoucherConsumptionRegisterBatchLog registerBatchLog;

        registerBatchLog.clear();
        registerBatchLog.InteVoucherId = _lines.InteVoucherId;
        registerBatchLog.AvailPhysical = _lines.AvailPhysical;
        registerBatchLog.ItemId = _lines.ItemId;
        registerBatchLog.ProjId = _lines.ProjId;
        registerBatchLog.TransDate = _lines.TransDate;
        registerBatchLog.IdVoucherConsumption = _lines.IdVoucherConsumption;
        registerBatchLog.RutRetira = _lines.RutRetira;
        registerBatchLog.IdArea = _lines.IdArea;
        registerBatchLog.insert();
    }

}
________________________________________________________

Validar RUT

public class EI_ValidateRUT
{
    /// <summary>
    /// calcula el dígito de verificación de un rut
    /// </summary>
    /// <param name = "rut">RUT</param>
    /// <returns>dígito de verificación</returns>
    public static char calculate(int rut)
    {
        int m = 0;
        int s = 1;
        ;

        while(rut != 0)
        {
            s = (s + rut mod 10 * (9 - (m mod 6))) mod 11;
            m++;
            rut = rut/10;
        }

        return num2char(s != 0 ? s + 47 : 75);
    }

    /// <summary>
    /// valida formato de un rut
    /// </summary>
    /// <param name = "texto">RUT</param>
    /// <returns>true si es correcto; false si es incorrecto</returns>
    public static boolean validate(str texto)
    {
        boolean ret = true;

        if(strStartsWith(texto, "0") || !str2IntOk(texto) || strLen(texto) > 8)
        {
            ret = false;
            warning("@EIP261:AX0209_0087");
        }

        return ret;
    }

}

______________________________________________________________________

public class EI_VoucherConsumptionSignWithQR extends RunBase
{
    Dialog                      dialog;
    DialogField                 dlgQRcode;
    EI_QRCode                   qrCode;
    EI_RUT                      rut;
    EI_VoucherConsumptionLine   lines;
    EI_EnrollmentBase           baseEnroll;
    EI_VoucherConsumption       header;
    public ClassDescription caption()
    {
        return "@EIP261:AX0209_0072";
    }

    public Object dialog()
    {
        dialog = super();

        dlgQRcode = dialog.addField(extendedTypeStr(Description255),"@EIP261:AX0209_0073");
        dlgQRcode.passwordStyle(true);

        return dialog;
    }

    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();

        qrcode = dlgQRcode.value();
    
        return ret;
    }

    public void run()
    {
        EI_VoucherConsumptionRequest            headerVoucherRequest;
        EI_VoucherConsumptionRequestLine        lineVoucherRequest;

        rut = EI_VoucherConsumptionHelper::getRutfromQr(qrcode);
        if(rut == header.Rut)
        {
            baseEnroll = EI_EnrollmentBase::find(rut,header.ProjId);
            if(baseEnroll)
            {
                if(baseEnroll.EndEnrollment < today() && baseEnroll.EndEnrollment != dateNull())
                {
                    checkFailed("@EIP261:AX0209_0068");
                    return;
                }
                ttsBegin;
                header.selectForUpdate(true);
                header.RutRetira = rut;
                header.CodigoFirma = qrcode;
                header.update();
                update_recordSet   lines
                setting
                    IsSign = NoYes::Yes,
                    RutRetira = rut
                where  lines.IdVoucherConsumption == header.IdVoucherConsumption;
                
                //<Update Integration records>
                headerVoucherRequest = EI_VoucherConsumptionRequest::find(header.InteVoucherId, true);
                if (headerVoucherRequest.RecId != 0)
                {
                    headerVoucherRequest.IdVoucherConsumption = header.IdVoucherConsumption;
                    headerVoucherRequest.Status = EI_IntegrationVoucherStatus::Delivered;
                    headerVoucherRequest.IsSign = NoYes::Yes;
                    headerVoucherRequest.doUpdate();

                    while select forUpdate lineVoucherRequest
                        where lineVoucherRequest.InteVoucherId == headerVoucherRequest.InteVoucherId
                    {
                        lineVoucherRequest.Status = EI_IntegrationVoucherStatus::Delivered;
                        lineVoucherRequest.IsSign = NoYes::Yes;
                        lineVoucherRequest.doUpdate();
                    }
                }
                //<End Update>
                ttsCommit;
            }
            else
            {
                checkFailed(strFmt("@EIP261:AX0209_0071",rut,header.ProjId));
                return;
            }
        }
        else
        {
            throw error("@EIP261:AX0209_0075");
        }
    }

    Public void voucherConsumption(EI_VoucherConsumption _header)
    {
        header = _header;
    }

}

_________________________________________________________

public class EI_VoucherConsumptionReset
{
    public void run(EI_VoucherConsumptionLine _voucherConsumptionsLine)
    {
        EI_VoucherConsumptionRequest        request;
        EI_VoucherConsumption               voucherConsumption;

        try
        {
            voucherConsumption = EI_VoucherConsumption::find(_voucherConsumptionsLine.IdVoucherConsumption,true);
            if (voucherConsumption.RecId == 0)
            {
                throw error("@EIP261:BOD_DIG_0078");
            }
            else
            {
                ttsbegin;
                request = EI_VoucherConsumptionRequest::find(voucherConsumption.InteVoucherId,true);
                If (request.RecId == 0)
                {
                    throw error("@EIP261:BOD_DIG_0078");
                }
                else
                {
                    request.IdVoucherConsumption = "";
                    request.doUpdate();
                }

                voucherConsumption.delete();
                ttscommit;
            }
        }
        catch (exception::Deadlock)
        {
            ttsAbort;
        }
    }

    public static EI_VoucherConsumptionReset   construct()
    {
        return new EI_VoucherConsumptionReset();
    }

    public static void  main(Args  args)
    {
        FormRun                     FormRun = args.caller();
        EI_VoucherConsumptionLine   voucherConsumptionsLine;

        EI_VoucherConsumptionReset EI_VoucherConsumptionReset = EI_VoucherConsumptionReset::construct();
        if (args)
        {
            if (args.dataset() == tablenum(EI_VoucherConsumptionLine) && args.caller().name() == formstr(EI_VoucherConsumptionEdit))
            {
                voucherConsumptionsLine = args.record();
                EI_VoucherConsumptionReset.run(voucherConsumptionsLine);
            }
            else
            {
                throw error("@EIP261:BOD_DIG_0076");
            }
        }

        FormRun.close();
    }

}

______________________________________________________________

public class EI_VoucherConsumptionRequestRequest
{
    void run(formdatasource _record)
    {
        Formdatasource                      record = _record;
        EI_VoucherConsumptionRequest        headerCache;
        EI_VoucherConsumptionRequest        headerLocal;
        EI_VoucherConsumptionRequestLine    line;
        EI_VoucherConsumptionRequestLine    lineUpd;

        try
        {
            ttsbegin;

            for (headerCache = record.getFirst(true) ? record.getFirst(true) : record.cursor(); headerCache; headerCache = record.getNext())
            {
                headerLocal = EI_VoucherConsumptionRequest::findRecId(headerCache.RecId, true);

                select sum(DeliveryQty) from line where
                    line.InteVoucherId == headerLocal.InteVoucherId;

                if(line.DeliveryQty > 0)
                {
                    headerLocal.Status = EI_IntegrationVoucherStatus::PendingConfirm;
                    headerLocal.doUpdate();

                    while select forUpdate lineUpd
                        where lineUpd.InteVoucherId == headerLocal.InteVoucherId
                    {
                        lineUpd.Status = EI_IntegrationVoucherStatus::PendingConfirm;
                        lineUpd.doUpdate();
                    }
                }
                else
                {
                    Box::warning("@EIP261:BOD_DIG_0019");
                }

            }
            ttscommit;

        }
        catch (exception::Deadlock)
        {
            retry;
        }

        record.research();
    }

    static EI_VoucherConsumptionRequestRequest  construct()
    {
        return new EI_VoucherConsumptionRequestRequest();
    }

    static void  main(Args  _args)
    {
        FormRun         formRun = _args.caller();
        FormDataSource  record = formRun.dataSource();

        EI_VoucherConsumptionRequestRequest    request = EI_VoucherConsumptionRequestRequest::construct();
        request.run(record);
    }

}
____________________________________________________________________

public class EI_VoucherConsumptionRequestCreateCharge
{
    void run(EI_VoucherConsumptionRequest _requestHeader)
    {
        Args                                    args = new Args();
        FormRun                                 frVoucherConsumption;
        EI_VoucherConsumptionRequest            requestHeader;
        EI_VoucherConsumptionRequestLine        requestLine;
        EI_ChargeTable                          chargeTable;
        EI_ChargeLine                           chargeLine;

        try
        {
            ttsbegin;
            requestHeader = EI_VoucherConsumptionRequest::findRecId(_requestHeader.RecId,true);

            chargeTable.clear();
            chargeTable.initValue();
            chargeTable.CodigoFirma = requestHeader.CodigoFirma;
            chargeTable.ProjId = requestHeader.ProjId;
            chargeTable.Rut = requestHeader.IdWorkerSC;
            chargeTable.InventSiteId = ProjTable::find(requestHeader.ProjId).EI_InventSiteId;
            chargeTable.InventLocationCharge = (select firstOnly InventLocation 
                                                    where InventLocation.InventSiteId == chargeTable.InventSiteId
                                                        && InventLocation.EI_IsCharge == NoYes::Yes).InventLocationId;
            chargeTable.IsSign = NoYes::No;
            chargeTable.ChargeType = EI_ChargeType::Charge;
            if (chargeTable.validateWrite())
            {
                chargeTable.insert();
            }
            else
            {
                throw error("@EIP261:BOD_DIG_0022");
            }

            while select requestLine where requestLine.InteVoucherId == requestHeader.InteVoucherId
            {
                chargeLine.clear();
                chargeLine.ChargeId = chargeTable.ChargeId;
                chargeLine.ChargeStatus = EI_ChargeStatus::Pending;
                chargeLine.InteVoucherId = requestLine.InteVoucherId;
                chargeLine.ProjId= requestHeader.ProjId;
                chargeLine.IdArea = requestLine.IdArea;
                chargeLine.Rut = requestHeader.IdWorkerSC;
                chargeLine.RutFirma = "";
                chargeLine.InventSiteId = chargeTable.InventSiteId;
                chargeLine.InventLocationCharge = chargeTable.InventLocationCharge;
                chargeLine.IdWorkerApp = requestLine.IdWorkerApp;
                chargeLine.IdEspecialidad = (select firstOnly EI_EnrollmentBase
                                                where EI_EnrollmentBase.ProjId == requestHeader.ProjId
                                                    && EI_EnrollmentBase.Rut == chargeLine.Rut).IdEspecialidad;
                chargeLine.ItemId = requestLine.ItemId;
                chargeLine.Qty = requestLine.DeliveryQty;
                chargeLine.SalesUnit = requestLine.Unit;
                chargeLine.TransDate = systemDateGet();
                chargeLine.ChargeType = chargeTable.ChargeType;
                chargeLine.Observations = "@EIP261:BOD_DIG_0036";
                chargeLine.modifiedField(fieldNum(EI_ChargeLine,ItemId));
                if (chargeLine.validateWrite())
                {
                    chargeLine.insert();
                }
                else
                {
                    throw error("@EIP261:BOD_DIG_0022");
                }
            }

            requestHeader.ChargeId = chargeTable.ChargeId;
            requestHeader.doUpdate();

            ttscommit;

        }
        catch (exception::Deadlock)
        {
            ttsAbort;
        }

        if (requestHeader.DeliveryType == EI_DeliveryType::Meson)
        {
            args.name(formStr(EI_ChargeEdit));
            args.caller(this);
            args.record(chargeTable);
            frVoucherConsumption = classfactory.formRunClass(args);
            frVoucherConsumption.init();
            frVoucherConsumption.run();
            frVoucherConsumption.wait();
        }
    }

    static EI_VoucherConsumptionRequestCreateCharge  construct()
    {
        return new EI_VoucherConsumptionRequestCreateCharge();
    }

    static void  main(Args  args)
    {
        FormRun                         formRun = args.caller();
        FormDataSource                  record = formRun.dataSource();
        EI_VoucherConsumptionRequest    requestHeader = args.record();

        EI_VoucherConsumptionRequestCreateCharge request = EI_VoucherConsumptionRequestCreateCharge::construct();

        request.run(requestHeader);
        
        record.research(true);
    }

}

__________________________________________________________

public class EI_VoucherConsumptionRequestCreate
{
    void run(EI_VoucherConsumptionRequest _requestHeader)
    {
        Args                                    args = new Args();
        FormRun                                 frVoucherConsumption;
        EI_VoucherConsumptionRequest            requestHeader;
        EI_VoucherConsumptionRequestLine        requestLine;
        EI_VoucherConsumption                   voucherConsumption;
        EI_VoucherConsumptionLine               voucherConsumptionLine;

        try
        {
            ttsbegin;
            requestHeader = EI_VoucherConsumptionRequest::findRecId(_requestHeader.RecId,true);

            voucherConsumption.clear();
            voucherConsumption.initValue();
            voucherConsumption.InventLocationId = requestHeader.InventLocationId;
            voucherConsumption.CodigoFirma = requestHeader.CodigoFirma;
            voucherConsumption.IdArea = requestHeader.IdArea;
            voucherConsumption.IdWorkerApp = requestHeader.IdWorkerApp;
            voucherConsumption.InteVoucherId = requestHeader.InteVoucherId;
            voucherConsumption.InventDimId = "";
            voucherConsumption.ProjId = requestHeader.ProjId;
            voucherConsumption.Rut = requestHeader.IdWorkerSC;
            voucherConsumption.RutRetira = "";
            voucherConsumption.TransDate = systemDateGet();
            voucherConsumption.Status = EI_StatusVoucherComsumption::Pending;
            if (voucherConsumption.validateWrite())
            {
                voucherConsumption.insert();
            }
            else
            {
                throw error("@EIP261:BOD_DIG_0022");
            }

            while select requestLine where requestLine.InteVoucherId == requestHeader.InteVoucherId
                                              && requestLine.DeliveryQty > 0
            {
                voucherConsumptionLine.clear();
                voucherConsumptionLine.IdVoucherConsumption = voucherConsumption.IdVoucherConsumption;
                voucherConsumptionLine.Status = voucherConsumption.Status;
                voucherConsumptionLine.InteVoucherId = requestLine.InteVoucherId;
                voucherConsumptionLine.ProjId= requestHeader.ProjId;
                voucherConsumptionLine.IdArea = requestLine.IdArea;
                voucherConsumptionLine.ItemId = requestLine.ItemId;
                voucherConsumptionLine.Qty = requestLine.DeliveryQty;
                voucherConsumptionLine.QtyReg = 0;
                voucherConsumptionLine.AvailPhysical = requestLine.AvailPhysicalArea;
                voucherConsumptionLine.IdWorkerApp = requestLine.IdWorkerApp;
                voucherConsumptionLine.Rut = requestLine.IdWorkerWD;
                voucherConsumptionLine.RutRetira = "";
                voucherConsumptionLine.SalesUnit = requestLine.Unit;
                voucherConsumptionLine.TransDate = systemDateGet();
                voucherConsumptionLine.InventDimId = "";
                voucherConsumptionLine.IsSign = NoYes::No;

                if (voucherConsumptionLine.validateWrite())
                {
                    voucherConsumptionLine.insert();
                }
                else
                {
                    throw error("@EIP261:BOD_DIG_0022");
                }
            }

            /*requestHeader.IdVoucherConsumption = voucherConsumption.IdVoucherConsumption;
            requestHeader.doUpdate();*/

            ttscommit;

        }
        catch (exception::Deadlock)
        {
            ttsAbort;
        }

        if (requestHeader.DeliveryType == EI_DeliveryType::Meson)
        {
            args.name(formStr(EI_VoucherConsumptionEdit));
            args.caller(this);
            args.record(voucherConsumption);
            frVoucherConsumption = classfactory.formRunClass(args);
            frVoucherConsumption.init();
            frVoucherConsumption.run();
            frVoucherConsumption.wait();
        }
    }

    static EI_VoucherConsumptionRequestCreate  construct()
    {
        return new EI_VoucherConsumptionRequestCreate();
    }

    static void  main(Args  args)
    {
        FormRun                         formRun = args.caller();
        FormDataSource                  record = formRun.dataSource();
        EI_VoucherConsumptionRequest    requestHeader = args.record();

        EI_VoucherConsumptionRequestCreate request = EI_VoucherConsumptionRequestCreate::construct();

        request.run(requestHeader);
        
        record.research(true);
    }

}
__________________________________________________________

public class EI_VoucherConsumptionRequestConfirmation
{
    void run(formdatasource _record)
    {
        Formdatasource                      record = _record;
        EI_VoucherConsumptionRequest        headerCache;
        EI_VoucherConsumptionRequest        headerLocal;
        EI_VoucherConsumptionRequestLine    line;
        EI_VoucherConsumptionRequestLine    lineUpd;

        try
        {
            ttsbegin;

            for (headerCache = record.getFirst(true) ? record.getFirst(true) : record.cursor(); headerCache; headerCache = record.getNext())
            {
                headerLocal = EI_VoucherConsumptionRequest::findRecId(headerCache.RecId, true);

                select sum(DeliveryQty) from line where
                    line.InteVoucherId == headerLocal.InteVoucherId;

                if(line.DeliveryQty > 0)
                {
                    headerLocal.Status = EI_IntegrationVoucherStatus::OrderReady;
                    headerLocal.doUpdate();

                    while select forUpdate lineUpd 
                        where lineUpd.InteVoucherId == headerLocal.InteVoucherId
                    {
                        lineUpd.Status = EI_IntegrationVoucherStatus::OrderReady;
                        lineUpd.doUpdate();
                    }
                }
                else
                {
                    Box::warning("@EIP261:BOD_DIG_0019");
                }

            }
            ttscommit;

        }
        catch (exception::Deadlock)
        {
            retry;
        }

        record.research();
    }

    static EI_VoucherConsumptionRequestConfirmation  construct()
    {
        return new EI_VoucherConsumptionRequestConfirmation();
    }

    static void  main(Args  _args)
    {
        FormRun         formRun = _args.caller();
        FormDataSource  record = formRun.dataSource();

        EI_VoucherConsumptionRequestConfirmation    request = EI_VoucherConsumptionRequestConfirmation::construct();
        request.run(record);
    }

}

______________________________________________________________________


public class EI_VoucherConsumptionRequestCancel
{
    void run(formdatasource _record)
    {
        Formdatasource                      record = _record;
        EI_VoucherConsumptionRequest        requestCache;
        EI_VoucherConsumptionRequest        requestLocal;
        EI_VoucherConsumptionRequestLine    lineUpd;
        EI_CancelOptionVCE                  motivo;

        //Valida Cancelación
        Dialog          dialog;
        DialogField     fieldMotivo;

        dialog = new dialog('@EIP261:BOD_DIG_0044');
        fieldMotivo = dialog.addField(enumStr(EI_CancelOptionVCE), "@EIP261:BOD_DIG_0045");

        if (dialog.run() && fieldMotivo.value())
        {
            motivo = fieldMotivo.value();

            try
            {
                ttsbegin;

                for (requestCache = record.getFirst(true) ? record.getFirst(true) : record.cursor();
                requestCache;
                requestCache = record.getNext())
                {
                    requestLocal = EI_VoucherConsumptionRequest::findRecId(requestCache.RecId,true);

                    requestLocal.Status = EI_IntegrationVoucherStatus::Cancelled;
                    requestLocal.CancelOptionVCE = motivo;

                    requestLocal.doUpdate();

                    while select forUpdate lineUpd
                        where lineUpd.InteVoucherId == requestLocal.InteVoucherId
                    {
                        lineUpd.Status = EI_IntegrationVoucherStatus::Cancelled;
                        lineUpd.doUpdate();
                    }

                }
                ttscommit;

            }
            catch (exception::Deadlock)
            {
                retry;
            }

            record.research();
        }
        else
        {
            Box::warning('@EIP261:BOD_DIG_0020');
        }
    }

    static EI_VoucherConsumptionRequestCancel  construct()
    {
        return new EI_VoucherConsumptionRequestCancel();
    }

    static void  main(Args  _args)
    {
        FormRun         formRun = _args.caller();
        FormDataSource  record = formRun.dataSource();

        EI_VoucherConsumptionRequestCancel  request = EI_VoucherConsumptionRequestCancel::construct();
        request.run(record);
    }

}

____________________________________________________________

public class EI_VoucherConsumptionReprocess extends RunBaseBatch
{   
    // Packed variables
    EI_IdVoucherConsumption         idVoucher;

    // Dialog fields
    DialogField                     dlgvoucher;

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
        idVoucher
    #endmacro

    static ClassDescription description()
    {
        return "@EIP261:BOD_DIG_0001";
    }

    public Object dialog()
    {
        DialogRunbase       dialog = super();

        dlgvoucher = dialog.addFieldValue(extendedTypeStr(EI_IdVoucherConsumption),idVoucher);
        
        return dialog;
    }

    public boolean getFromDialog()
    {
        idVoucher = dlgvoucher.value();
        
        return super();
    }

    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

    public boolean validate(Object _calledFrom = null)
    {
        if (false)
        {
            return checkFailed("");
        }

        return true;
    }

    public void deleteJournals(EI_VoucherConsumption    _header)
    {
        inventJournalTable                  inventJournalTable;
        InventJournalId                     journalId;
        EI_VoucherConsumptionPostLog        log;

        ttsBegin;
        while select forUpdate log
          where log.IdVoucherConsumption == _header.IdVoucherConsumption
             && log.Status == EI_StatusVoucherComsumption::noRegister
             && log.InventJournalId != ''
        {
            journalId = log.InventJournalId;
            inventJournalTable = inventJournalTable::find(journalId,true);
            
            if(inventJournalTable)
            {
                inventJournalTable.delete();
            }

            log.delete();
        }
        ttsCommit;
    }

    //<Cambio EA : 23Junio2022>
    public static ProjCategoryId getLastPurchCategory(EI_VoucherConsumptionLine _lines)
    {
        InventTrans     InventTransLP;
        CategoryId      categoryId;
        InventSiteId    defaultInventSiteId;
        InventDim       inventDim;

        select maxOf(RecId) from InventTransLP
        where InventTransLP.ItemId == _lines.ItemId
        && InventTransLP.ProjId == _lines.ProjId
        && (InventTransLP.StatusReceipt == StatusReceipt::Purchased || InventTransLP.StatusReceipt == StatusReceipt::Received);

        categoryId = InventTrans::findRecId(InventTransLP.RecId).ProjCategoryId;

        if(!categoryId)
        {
            InventTransLP.clear();

            select maxOf(RecId) from InventTransLP
            where InventTransLP.ItemId == _lines.ItemId
               && InventTransLP.ProjId == _lines.ProjId
               && (InventTransLP.StatusIssue == StatusIssue::Sold && InventTransLP.ProjCategoryId != "");

            categoryId = InventTrans::findRecId(InventTransLP.RecId).ProjCategoryId;

        }

        if(!categoryId)
        {
            InventTransLP.clear();
            defaultInventSiteId = ProjTable::find(_lines.ProjId).EI_InventSiteId;

            select maxOf(RecId) from InventTransLP
            where InventTransLP.ItemId == _lines.ItemId
                && (InventTransLP.StatusIssue == StatusIssue::Sold && InventTransLP.ProjCategoryId != "") 
                || (InventTransLP.StatusReceipt == StatusReceipt::Purchased && InventTransLP.ProjCategoryId != "")
            join inventDim
                where inventDim.inventDimId == InventTransLP.inventDimId
                && inventDim.InventSiteId == defaultInventSiteId;

            categoryId = InventTrans::findRecId(InventTransLP.RecId).ProjCategoryId;
        }

        if(!categoryId)
        {
            categoryId = InventTable::find(_lines.ItemId).projCategoryId;
        }

        return categoryId;
    }

    //</Cambio EA : 23Junio2022>

    public boolean registerVoucher(EI_VoucherConsumption    _header)
    {
        boolean                         ret;
        ProjParameters                  projParameters = ProjParameters::find();
        EI_DigitalWarehouseParameters   dwParameters = EI_DigitalWarehouseParameters::find();  
        EI_VoucherConsumptionLine       lines;
        SalesLine                       salesLine;
        SalesTable                      salesTable;
        container                       linesForJour, qtys, lines0Stock;
        Qty                             qtyForSend, qtyPhy, qtyForReq, physicalOnhand;
        salesFormLetter                 salesFormLetter;
        boolean                         itemReq, insJournal;
        InventJournalTable              inventJournalTable;
        InventJournalTrans              inventJournalTrans;
        InventJournalName               inventJournalName;
        int                             i;
        recid                           recid;
        InventDim                       inventdim,
                                        inventD;
        InventDimId                     projInventDimId;
        ProjTable                       projTable;
        journalCheckPost                journalCheckPost;
        EI_VoucherConsumptionPostLog    log;
        InventSum                       inventSum;
        InventSumRecalcItem             inventSumRecalcItem;
        InventTransOrigin               inventTransOrigin;
        InventTrans                     inventTrans;
        
        #define.DefaultProjLinePropertyId("NO_FACTURA")

        projTable = ProjTable::find(_header.ProjId);
        
        if(_header.isMultiproject)
        {
            inventdim.clear();
            inventdim = InventDim::find(_header.InventDimId);
        }
        else
        {
            if(ProjTable.EI_InventSiteId)
            {
                inventdim.clear();
                inventdim.InventSiteId = projTable.EI_InventSiteId;
                inventdim.InventLocationId = _header.InventLocationId;
                inventdim = inventdim::findOrCreate(inventdim);
            }
        }
        linesforJour = conNull();
        //<Crear requisitos de artículo para reservar una cantidad de material>
        if(projParameters.CreateItemReqForPO)
        {
            while select forUpdate lines index hint IdxVoucherConsumption
                where lines.IdVoucherConsumption == _header.IdVoucherConsumption
                   && lines.IsSign == NoYes::Yes
                   && (lines.Status == EI_StatusVoucherComsumption::noRegister 
                   || lines.Status == EI_StatusVoucherComsumption::PartialRegister)
            {
                itemReq = false;
                qtyForSend = lines.Qty - lines.QtyReg;
                qtyForReq = 0;

                InventSumRecalcItem = new InventSumRecalcItem(lines.ItemId, false, checkfix::fix);
                InventSumRecalcItem.updatenow();

                try
                {
                    ttsBegin;
                    //<Start SalesLine>

                    while select forupdate SalesLine
                        where SalesLine.ProjId == _header.ProjId
                        && SalesLine.ItemId == lines.ItemId
                        && SalesLine.SalesStatus == SalesStatus::Backorder
                        && SalesLine.RemainInventPhysical != 0
                        join InventD
                        where InventD.inventDimId == SalesLine.InventDimId
                        && InventD.InventLocationId == _header.InventLocationId
                        join inventTransOrigin
                        where inventTransOrigin.InventTransId == SalesLine.InventTransId
                        join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.StatusIssue == StatusIssue::ReservPhysical
                    {
                        if(qtyForSend==0)
                        break;

                        //Verificar el disponible antes de registrar el artículo requerido
                        qtyPhy = 0;

                        while select InventSum
                            join InventD
                            where InventSum.ItemId == lines.ItemId
                            && InventSum.InventSiteId == inventdim.InventSiteId
                            && InventSum.InventLocationId == inventdim.InventLocationId
                            && InventD.inventDimId == InventSum.InventDimId
                        {
                            qtyPhy += InventSum.physicalInventCalculated();
                        }

                        if(qtyPhy)
                        {
                            //<clear SalesDeliverNow for others lines>
                            EI_VoucherConsumptionHelper::clearActualSalesLines(salesLine.SalesId);
                            SalesLine.reread();
                            //</clear SalesDeliverNow for others lines>

                            if(qtyPhy < SalesLine.RemainInventPhysical)
                            {
                                if(qtyPhy >= qtyForSend)
                                {
                                    SalesLine.SalesDeliverNow = qtyForSend;
                                }
                                else
                                {
                                    SalesLine.SalesDeliverNow = qtyPhy;
                                }
                            }
                            else if(SalesLine.RemainInventPhysical >= qtyForSend)
                            {

                                SalesLine.SalesDeliverNow = qtyForSend;
                            }
                            else
                            {
                                SalesLine.SalesDeliverNow = SalesLine.RemainInventPhysical;
                            }

                            salesLine.setInventDeliverNow();
                            salesLine.doUpdate();

                            SalesTable = SalesLine.salesTable(true);
                            if(SalesTable.EI_SalesPackingType == '')
                            {
                                SalesTable.EI_SalesPackingType = dwParameters.SalesPackingType;
                                SalesTable.doUpdate();
                            }

                            salesFormLetter = SalesFormLetter::construct(DocumentStatus::ProjectPackingSlip);
                            salesFormLetter.update(salesTable, SystemDateGet(),SalesUpdate::DeliverNow, AccountOrder::None, false, false,true);

                            SalesTable.reread();

                            log.clear();
                            log.IdVoucherConsumption =   _header.IdVoucherConsumption;
                            log.PackingSlipId = SalesTable.EI_LastPackingSlip();
                            log.Qty = SalesLine.SalesDeliverNow;
                            log.Status = EI_StatusVoucherComsumption::Register;
                            log.ItemId = lines.ItemId;
                            log.LineRecId = lines.recid;
                            log.insert();

                            lines.QtyReg += SalesLine.SalesDeliverNow;
                            lines.Status = EI_StatusVoucherComsumption::PartialRegister;
                            lines.update();

                            EI_InventTransHelper::updateFromSalesPacking(log.PackingSlipId, lines);

                            ProjInventDimId = EI_VoucherConsumptionHelper::getLocation(lines.ItemId, inventdim.InventSiteId, inventdim.InventLocationId);
                            physicalOnhand = EI_VoucherConsumptionHelper::getphysicalOnhand(lines.ItemId, ProjInventDimId);

                            qtyForReq += SalesLine.SalesDeliverNow;
                            qtyForSend -= SalesLine.SalesDeliverNow;
                            if(!qtyForSend || physicalOnhand == 0)
                            {
                                if (lines.QtyReg >= lines.Qty)
                                {
                                    lines.Status = EI_StatusVoucherComsumption::Register;
                                    lines.update();
                                }
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    //<End SalesLine>
                    ttsCommit;
                    itemReq = true;
                }
                catch(Exception::Error)
                {
                    ttsAbort;

                    ttsBegin;
                    qtyForSend = lines.Qty;
                    if (lines.QtyReg != lines.Qty && lines.QtyReg !=0)
                    lines.Status = EI_StatusVoucherComsumption::PartialRegister;
                    else
                    lines.Status = EI_StatusVoucherComsumption::noRegister;
                    lines.update();
                    ttsCommit;

                    delete_from log
                    where log.IdVoucherConsumption == _header.IdVoucherConsumption
                    && log.Status == EI_StatusVoucherComsumption::noRegister;

                    ret = ret & checkFailed(strFmt("@EIP261:BOD_DIG_0002", _header.IdVoucherConsumption));
                }

                if(!itemReq || qtyForSend)
                {
                    ProjInventDimId = EI_VoucherConsumptionHelper::getLocation(lines.ItemId, inventdim.InventSiteId, inventdim.InventLocationId);
                    physicalOnhand = EI_VoucherConsumptionHelper::getphysicalOnhand(lines.ItemId, ProjInventDimId);

                    if (physicalOnhand == 0)
                    {
                        ret = checkFailed(strFmt("@EIP261:BOD_DIG_0003", lines.ItemId));
                    }
                    else
                    {
                        linesforJour += lines.RecId;
                        qtys += qtyForSend;
                    }
                }
                else
                {
                    ret = true;
                }
            }
            
            lines.reread();
            
            if(conLen(linesforJour))
            {
                for(i=1;i<=conlen(linesforJour);i++)
                {
                    if(!inventJournalTable)
                    {
                        inventJournalTable.clear();
                        inventJournalName =  inventJournalName::find(inventJournalName::standardJournalName(InventJournalType::project));
                        inventJournalTable.initFrominventJournalName(inventJournalName);
                        inventJournalTable.insert();
                    }
                    recid = conPeek(linesforJour,i);
                    
                    select forUpdate firstonly lines 
                        where lines.RecId == recid;
                    
                    insJournal = true;

                    inventJournalTrans.clear();
                    inventJournalTrans.initFrominventJournalTable(inventJournalTable);
                    inventJournalTrans.TransDate = systemDateGet();
                    inventJournalTrans.ItemId = lines.ItemId;
                    inventJournalTrans.ProjId = _header.ProjId;
                    inventJournalTrans.EI_IdArea = lines.IdArea;
                    inventJournalTrans.initFromInventTable(InventTable::find(inventJournalTrans.ItemId));
                    inventJournalTrans.initFromprojTable(projTable);
                    inventJournalTrans.ProjLinePropertyId = #DefaultProjLinePropertyId;

                    //Agrega DFItem - 01-07-2022 - FC
                    inventJournalTrans.DefaultDimension = EI_VoucherConsumptionHelper::getDFItem(lines.ItemId, inventJournalTrans.DefaultDimension);

                    //Agrega DFItem - 01-07-2022 - FC
                    //<Cambio EA : 04Oct2021>
                    if (dwParameters.ActiveProjCategoryVCA == NoYes::Yes)
                    {
                        inventJournalTrans.ProjCategoryId = lines.ProjCategoryId;
                        //<Cambio EA : 23Junio2022>
                        if (!inventJournalTrans.ProjCategoryId)
                        {
                            inventJournalTrans.ProjCategoryId = EI_VoucherConsumptionReprocess::getLastPurchCategory(lines);
                        }
                        //</Cambio EA : 23Junio2022>
                    }
                    else
                    {
                        //<Cambio EA : 23Junio2022>
                        inventJournalTrans.ProjCategoryId = EI_VoucherConsumptionReprocess::getLastPurchCategory(lines);
                        //</Cambio EA : 23Junio2022>
                    }
                    //</Cambio EA : 04Oct2021>
                    inventJournalTrans.InventDimId = EI_VoucherConsumptionHelper::getLocation(inventJournalTrans.ItemId, inventdim.InventSiteId, inventdim.InventLocationId);
                    inventJournalTrans.ProjUnitID =  InventTableModule::find(lines.ItemId,ModuleInventPurchSales::Purch).UnitId;

                    physicalOnhand = EI_VoucherConsumptionHelper::getAvailPhysical(lines.ItemId,inventJournalTrans.InventDimId);

                    if (physicalOnhand == 0)
                    {
                        insJournal = checkFailed(strFmt("@EIP261:BOD_DIG_0003",lines.ItemId));
                    }
                    else
                    {
                        inventJournalTrans.Qty = conPeek(qtys,i);

                        if (physicalOnhand < inventJournalTrans.Qty)
                        {
                            inventJournalTrans.Qty = physicalOnhand;
                            qtys = conPoke(qtys, i, physicalOnhand);
                        }
                    }

                    if (insJournal)
                    {
                        inventJournalTrans.insert();
                    }
                    else
                    {
                        linesforJour = conDel(linesforJour,i,1);
                        qtys = conDel(qtys,i,1);
                        i--;
                        lines0Stock += lines.RecId;
                    }
                }
                if(conLen(linesforJour) <1 && inventJournalTable)
                {
                    inventJournalTable.delete();
                    inventJournalTable.clear();
                }

                delete_from log
                    where log.IdVoucherConsumption == _header.IdVoucherConsumption
                       && log.Status == EI_StatusVoucherComsumption::noRegister;
            }
        }
        else    //<No está activado el parámetro para Crear requisitos de artículo para reservar una cantidad de material>
        {
            ttsBegin;
            while select forUpdate lines index hint IdxVoucherConsumption
            where lines.IdVoucherConsumption == _header.IdVoucherConsumption
            && (lines.Status == EI_StatusVoucherComsumption::noRegister ||
                lines.Status == EI_StatusVoucherComsumption::PartialRegister)
            && lines.IsSign == NoYes::Yes
            {
                if(!inventJournalTable)
                {
                    inventJournalTable.clear();
                    inventJournalName =  inventJournalName::find(
                                inventJournalName::standardJournalName(InventJournalType::project));
                    inventJournalTable.initFrominventJournalName(inventJournalName);
                    inventJournalTable.insert();
                }

                insJournal = true;

                inventJournalTrans.clear();
                inventJournalTrans.initFrominventJournalTable(inventJournalTable);
                inventJournalTrans.TransDate = systemDateGet();
                inventJournalTrans.ItemId = lines.ItemId;
                inventJournalTrans.ProjId = _header.ProjId;
                inventJournalTrans.initFromInventTable(InventTable::find(inventJournalTrans.ItemId));
                inventJournalTrans.initFromprojTable(projTable);
                inventJournalTrans.ProjLinePropertyId = #DefaultProjLinePropertyId;
                
                //<Cambio EA : 04Oct2021>
                if (dwParameters.ActiveProjCategoryVCA == NoYes::Yes)
                {
                    inventJournalTrans.ProjCategoryId = lines.ProjCategoryId;
                    //<Cambio EA : 23Junio2022>
                    if (!inventJournalTrans.ProjCategoryId)
                    {
                        inventJournalTrans.ProjCategoryId = EI_VoucherConsumptionReprocess::getLastPurchCategory(lines);
                    }
                    //</Cambio EA : 23Junio2022>
                }
                else
                {
                    //<Cambio EA : 23Junio2022>
                    inventJournalTrans.ProjCategoryId = EI_VoucherConsumptionReprocess::getLastPurchCategory(lines);
                    //</Cambio EA : 23Junio2022>
                }
                //</Cambio EA : 04Oct2021>
                inventJournalTrans.InventDimId = EI_VoucherConsumptionHelper::getLocation(inventJournalTrans.ItemId, inventdim.InventSiteId, inventdim.InventLocationId);
                inventJournalTrans.ProjUnitID =  InventTableModule::find(lines.ItemId,ModuleInventPurchSales::Purch).UnitId;

                inventJournalTrans.Qty = lines.Qty - lines.QtyReg;

                PhysicalOnhand = EI_VoucherConsumptionHelper::getAvailPhysical(lines.ItemId, inventJournalTrans.InventDimId);

                if (PhysicalOnhand == 0)
                {
                    insJournal = checkFailed(strFmt("@EIP261:BOD_DIG_0051",lines.ItemId));
                }
                else
                {
                    if (PhysicalOnhand < inventJournalTrans.Qty)
                    {
                        inventJournalTrans.Qty = PhysicalOnhand;
                    }
                }

                if(insJournal)
                {
                    inventJournalTrans.insert();
                    linesforJour+= lines.RecId;
                    qtys+= inventJournalTrans.qty;
                }
                else
                {
                    lines0Stock += lines.RecId;
                }

            }
            if(conLen(linesforJour) <1 && inventJournalTable)
            {
                inventJournalTable.delete();
                inventJournalTable.clear();

            }
            ttsCommit;
        }
        ttsBegin;
        for(i=1;i<=conlen(lines0Stock);i++)
        {
            recid = conPeek(linesforJour,i);
            select forUpdate firstonly lines where lines.RecId == recid;
            if (lines)
            {
                lines.Status = EI_StatusVoucherComsumption::noRegister;
                lines.update();
            }
        }
        ttsCommit;
        if(inventJournalTable)
        {
            try
            {
                ttsBegin;
                journalCheckPost = InventJournalCheckPost::newPostJournal(inventJournalTable);
                journalCheckPost.parmThrowCheckFailed(false);
                journalCheckPost.run();
                ttsCommit;
                ret = true;
                inventJournalTable.reread();
                if(inventJournalTable.Posted)
                {
                    ttsBegin;
                    for(i=1;i<=conlen(linesforJour);i++)
                    {
                        recid = conPeek(linesforJour,i);
                        select forUpdate firstonly lines where lines.RecId == recid;
                        if (lines)
                        {
                            lines.QtyReg += conPeek(qtys,i);

                            if (lines.QtyReg >= lines.Qty)
                            lines.Status = EI_StatusVoucherComsumption::Register;
                            else
                            lines.Status = EI_StatusVoucherComsumption::PartialRegister;

                            lines.update();
                        }
                        log.clear();
                        log.IdVoucherConsumption = _header.IdVoucherConsumption;
                        log.InventJournalId = inventJournalTable.JournalId;
                        log.ItemId = lines.ItemId;
                        log.Qty = conPeek(qtys,i);
                        log.status = EI_StatusVoucherComsumption::Register;
                        log.LineRecId = lines.recid;
                        log.insert();
                    }
                    EI_InventTransHelper::updateFrominventJournalTrans(inventJournalTable.JournalId);
                    ttsCommit;

                }
                else
                {
                    ttsBegin;
                    for(i=1;i<=conlen(linesforJour);i++)
                    {
                        recid = conPeek(linesforJour,i);
                        select forUpdate firstonly lines where lines.RecId == recid;
                        if (lines)
                        {
                            lines.Status = EI_StatusVoucherComsumption::noRegister;
                            lines.update();
                        }
                        log.clear();
                        log.IdVoucherConsumption = _header.IdVoucherConsumption;
                        log.InventJournalId = inventJournalTable.JournalId;
                        log.ItemId = lines.ItemId;
                        log.Qty = conPeek(qtys,i);
                        log.status = EI_StatusVoucherComsumption::noRegister;
                        log.LineRecId = lines.recid;
                        log.insert();
                    }
                    ttsCommit;
                }


            }
            catch (Exception::Error)
            {
                ttsBegin;
                for(i=1;i<=conlen(linesforJour);i++)
                {
                    recid = conPeek(linesforJour,i);
                    select forUpdate firstonly lines where lines.RecId == recid;
                    if (lines)
                    {
                        lines.Status = EI_StatusVoucherComsumption::noRegister;
                        lines.update();
                    }
                    log.clear();
                    log.IdVoucherConsumption = _header.IdVoucherConsumption;
                    log.InventJournalId = inventJournalTable.JournalId;
                    log.ItemId = lines.ItemId;
                    log.Qty = conPeek(qtys,i);
                    log.status = EI_StatusVoucherComsumption::noRegister;
                    log.LineRecId = lines.recid;
                    log.insert();
                }
                ttsCommit;
                ret = ret & checkFailed(strFmt("@EIP261:BOD_DIG_0002", _header.IdVoucherConsumption));
            }
        }

        return ret;
    }

    private void processVoucher()
    {
        Query                           q;
        QueryRun                        qr;
        QueryBuildDataSource            qbds;
        EI_VoucherConsumption           header;
        
        q = new Query();
        qbds = q.addDataSource(tableNum(EI_VoucherConsumption));

        qbds.addRange(fieldNum(EI_VoucherConsumption,Status)).value(queryValue(EI_StatusVoucherComsumption::noRegister));
        qbds.addRange(fieldNum(EI_VoucherConsumption,rutretira)).value(SysQuery::valueNotEmptyString());
        
        if(idVoucher)
        {
            qbds.addRange(fieldNum(EI_VoucherConsumption,IdVoucherConsumption)).value(idVoucher);
        }

        qr = new QueryRun(q);
        
        while(qr.next())
        {
            header = qr.get(tableNum(EI_VoucherConsumption));
            header.selectForUpdate(true);
            try
            {
                this.deleteJournals(header);
                this.registerVoucher(header);
                EI_VoucherConsumptionHelper::updateStatus(header);
            }
            catch(Exception::Error)
            {
                ttsBegin;
                header.Status = EI_StatusVoucherComsumption::noRegister;
                header.update();
                ttsCommit;
            }
        }
    }

    public void run()
    {
        #OCCRetryCount
        if (!this.validate())
        {
            throw error("");
        }
        try
        {
            this.processVoucher();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

    server static EI_VoucherConsumptionReprocess construct()
    {
        return new EI_VoucherConsumptionReprocess();
    }

    static void main(Args args)
    {
        EI_VoucherConsumptionReprocess    voucherConsumptionReprocess;

        voucherConsumptionReprocess = EI_VoucherConsumptionReprocess::construct();

        if (voucherConsumptionReprocess.prompt())
        {
            voucherConsumptionReprocess.run();
        }
    }

}

__________________________________________________

public class EI_VoucherConsumptionRegisterBatch extends RunBaseBatch
{
    // Packed variables
    EI_IdVoucherConsumption       idVoucher;
    EI_VoucherConsumption         header;

    // Dialog fields
    DialogField     dlgvoucher;

    #define.CurrentVersion(1)
    #define.Version1(1)
    #localmacro.CurrentList
        idVoucher
    #endmacro
    
    public Object dialog()
    {
        DialogRunbase       dialog = super();
        
        dlgvoucher = dialog.addFieldValue(extendedTypeStr(EI_IdVoucherConsumption),idVoucher);
        
        return dialog;
    }

    public boolean getFromDialog()
    {
        idVoucher = dlgvoucher.value();

        return super();
    }

    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

    private void processVoucher()
    {
        Query                   q;
        QueryRun                qr;
        QueryBuildDataSource    qbds;
       
        q = new Query();
        qbds = q.addDataSource(tableNum(EI_VoucherConsumption));

        qbds.addRange(fieldNum(EI_VoucherConsumption,Status)).value(queryValue(EI_StatusVoucherComsumption::Pending));
        qbds.addRange(fieldNum(EI_VoucherConsumption,rutretira)).value(SysQuery::valueNotEmptyString());
        if(idVoucher)
        {
            qbds.addRange(fieldNum(EI_VoucherConsumption,IdVoucherConsumption)).value(idVoucher);
        }
        qr = new QueryRun(q);
        while(qr.next())
        {
            header = qr.get(tableNum(EI_VoucherConsumption));
            header.selectForUpdate(true);

            EI_VoucherConsumptionHelper::registerVoucher(header);
            EI_VoucherConsumptionHelper::updateStatus(header);
        }
    }

    public void run()
    {
        #OCCRetryCount
        if(!this.validate())
        {
            throw error("");
        }

        this.processVoucher();
    }

    public boolean validate(Object calledFrom = null)
    {
        if (false)
        {
            return checkFailed("");
        }

        return true;
    }

    server static EI_VoucherConsumptionRegisterBatch construct()
    {
        return new EI_VoucherConsumptionRegisterBatch();
    }

    static ClassDescription description()
    {
        return "@EIP261:AX0209_0095";
    }

    static void main(Args args)
    {
        EI_VoucherConsumptionRegisterBatch    voucherConsumptionRegister;
        
        voucherConsumptionRegister = EI_VoucherConsumptionRegisterBatch::construct();

        if (voucherConsumptionRegister.prompt())
        {
            voucherConsumptionRegister.run();
        }
    }

}

__________________________________________________


class EI_VoucherConsumptionDeliveryGroundController extends SysOperationServiceController
{
    public static void main(Args _args)
    {
        EI_VoucherConsumptionDeliveryGroundController controller = new EI_VoucherConsumptionDeliveryGroundController(classStr(EI_VoucherConsumptionDeliveryGround),
                                                                                                                     methodstr(EI_VoucherConsumptionDeliveryGround,run),
                                                                                                                     SysOperationExecutionMode::Synchronous);

        controller.parmDialogCaption("@EIP261:BOD_DIG_0110");
        controller.startOperation();
    }

}

__________________________________________________

class EI_VoucherConsumptionDeliveryGround
{
    void createVoucherConsumpOrCharge()
    {
        EI_VoucherConsumptionRequest            requestHeader;
        EI_VoucherConsumptionRequestLine        requestLine;

        EI_VoucherConsumption       voucherHeader;
        EI_VoucherConsumptionLine   voucherLine;

        EI_ChargeTable              chargeHeader;
        EI_ChargeLine               chargeLine;

        Query                       q;
        QueryRun                    qr;
        QueryBuildDataSource        qbds;

        q = new Query();
        qbds = q.addDataSource(tableNum(EI_VoucherConsumptionRequest));

        qbds.addRange(fieldNum(EI_VoucherConsumptionRequest,Type)).value("0,1,3");
        qbds.addRange(fieldNum(EI_VoucherConsumptionRequest,Status)).value(queryValue(EI_IntegrationVoucherStatus::Delivered));
        qbds.addRange(fieldNum(EI_VoucherConsumptionRequest,DeliveryType)).value(queryValue(EI_DeliveryType::Ground));
        qbds.addRange(fieldNum(EI_VoucherConsumptionRequest,IdVoucherConsumption)).value(SysQuery::valueEmptyString());
        qbds.addRange(fieldNum(EI_VoucherConsumptionRequest,ChargeId)).value(SysQuery::valueEmptyString());


        qr = new QueryRun(q);
        while(qr.next())
        {
            requestHeader = qr.get(tableNum(EI_VoucherConsumptionRequest));
            requestHeader.selectForUpdate(true);

            switch (requestHeader.Type)
            {
                case EI_IntegrationVoucherType::Consumption, EI_IntegrationVoucherType::EPP:
                    voucherHeader.clear();
                    voucherHeader.initValue();
                    voucherHeader.CodigoFirma = requestHeader.CodigoFirma;
                    voucherHeader.IdArea = requestHeader.IdArea;
                    voucherHeader.IdWorkerApp = requestHeader.IdWorkerApp;
                    voucherHeader.InteVoucherId = requestHeader.InteVoucherId;
                    voucherHeader.InventDimId = "";
                    voucherHeader.ProjId = requestHeader.ProjId;
                    voucherHeader.Rut = requestHeader.IdWorkerSC;
                    voucherHeader.RutRetira = requestHeader.IdWorkerSC;
                    voucherHeader.TransDate = systemDateGet();
                    voucherHeader.Status = EI_StatusVoucherComsumption::Pending;
                    voucherHeader.InventLocationId = requestHeader.InventLocationId;
                    if (voucherHeader.validateWrite())
                    {
                        voucherHeader.insert();
                    }
                    else
                    {
                        throw error("@EIP261:BOD_DIG_0022");
                    }

                    while select requestLine
                    where requestLine.InteVoucherId == requestHeader.InteVoucherId
                       && requestLine.DeliveryQty > 0
                    {
                        voucherLine.clear();
                        voucherLine.IdVoucherConsumption = voucherHeader.IdVoucherConsumption;
                        voucherLine.Status = voucherHeader.Status;
                        voucherLine.InteVoucherId = requestLine.InteVoucherId;
                        voucherLine.ProjId= requestHeader.ProjId;
                        voucherLine.IdArea = requestLine.IdArea;
                        voucherLine.ItemId = requestLine.ItemId;
                        voucherLine.Qty = requestLine.DeliveryQty;
                        voucherLine.QtyReg = 0;
                        voucherLine.AvailPhysical = requestLine.AvailPhysicalArea;
                        voucherLine.IdWorkerApp = requestLine.IdWorkerApp;
                        voucherLine.Rut = requestLine.IdWorkerWD;
                        voucherLine.RutRetira = requestLine.IdWorkerWD;
                        voucherLine.SalesUnit = requestLine.Unit;
                        voucherLine.TransDate = systemDateGet();
                        voucherLine.InventDimId = "";
                        voucherLine.IsSign = NoYes::Yes;

                        if (voucherLine.validateWrite())
                        {
                            voucherLine.insert();
                        }
                        else
                        {
                            throw error("@EIP261:BOD_DIG_0022");
                        }
                    }

                    ttsBegin;
                    requestHeader.IdVoucherConsumption = voucherHeader.IdVoucherConsumption;
                    requestHeader.doUpdate();
                    ttscommit;

                    break;
                case EI_IntegrationVoucherType::Charge:
                    chargeHeader.clear();
                    chargeHeader.initValue();
                    chargeHeader.CodigoFirma = requestHeader.CodigoFirma;
                    chargeHeader.ProjId = requestHeader.ProjId;
                    chargeHeader.Rut = requestHeader.IdWorkerSC;
                    chargeHeader.RutFirma = requestHeader.IdWorkerSC;
                    chargeHeader.InventSiteId = ProjTable::find(requestHeader.ProjId).EI_InventSiteId;
                    chargeHeader.InventLocationCharge = (select firstOnly InventLocation
                                                            where InventLocation.InventSiteId == chargeHeader.InventSiteId
                                                                && InventLocation.EI_IsCharge == NoYes::Yes).InventLocationId;
                    chargeHeader.IsSign = NoYes::Yes;
                    chargeHeader.ChargeType = EI_ChargeType::Charge;
                    if (chargeHeader.validateWrite())
                    {
                        chargeHeader.insert();
                    }
                    else
                    {
                        throw error("@EIP261:BOD_DIG_0022");
                    }

                    while select requestLine
                    where requestLine.InteVoucherId == requestHeader.InteVoucherId
                       && requestLine.DeliveryQty > 0
                    {
                        chargeLine.clear();
                        chargeLine.ChargeId = chargeHeader.ChargeId;
                        chargeLine.ChargeStatus = EI_ChargeStatus::Pending;
                        chargeLine.InteVoucherId = requestLine.InteVoucherId;
                        chargeLine.ProjId= requestHeader.ProjId;
                        chargeLine.IdArea = requestLine.IdArea;
                        chargeLine.Rut = requestHeader.IdWorkerSC;
                        chargeLine.RutFirma = requestHeader.IdWorkerSC;
                        chargeLine.InventSiteId = chargeHeader.InventSiteId;
                        chargeLine.InventLocationCharge = chargeHeader.InventLocationCharge;
                        chargeLine.IdWorkerApp = requestLine.IdWorkerApp;
                        chargeLine.IdEspecialidad = (select firstOnly EI_EnrollmentBase
                                                        where EI_EnrollmentBase.ProjId == requestHeader.ProjId
                                                            && EI_EnrollmentBase.Rut == chargeLine.Rut).IdEspecialidad;
                        chargeLine.ItemId = requestLine.ItemId;
                        chargeLine.Qty = requestLine.DeliveryQty;
                        chargeLine.SalesUnit = requestLine.Unit;
                        chargeLine.TransDate = systemDateGet();
                        chargeLine.ChargeType = chargeHeader.ChargeType;
                        chargeLine.Observations = "@EIP261:BOD_DIG_0036";
                        chargeLine.modifiedField(fieldNum(EI_ChargeLine,ItemId));
                        chargeLine.IsSign = NoYes::Yes;
                        if (chargeLine.validateWrite())
                        {
                            chargeLine.insert();
                        }
                        else
                        {
                            throw error("@EIP261:BOD_DIG_0022");
                        }
                    }

                    ttsBegin;
                    requestHeader.ChargeId = chargeHeader.ChargeId;
                    requestHeader.doUpdate();
                    ttscommit;

                    break;
            }
        }
    }

    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            this.createVoucherConsumpOrCharge();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (exception::Deadlock)
        {
            ttsAbort;
        }
    }

}

_______________________________________________

public class EI_VoucherConsumptionCorrectLine extends RunBase
{
    Dialog                      dialog;
    DialogField                 dlgQty;

    Qty                         correctQty;
    Qty                         remainQty;

    EI_VoucherConsumptionLine   line;

    public Object dialog()
    {
        dialog = super();

        dlgQty = dialog.addField(extendedTypeStr(qty),"@EIP261:AX0209_0110");
        dlgQty.value(line.Qty - line.QtyReg);

        return dialog;
    }

    public boolean getFromDialog()
    {
        boolean ret;
        Qty     remain;

        //ret = super();

        correctQty = dlgQty.value();
        remain = line.Qty - line.QtyReg;

        if(correctQty > remain)
        {
            checkFailed(strFmt("@EIP261:BOD_DIG_0112",remain));
        }
        else
        {
            ret = true;
        }

        return ret;
    }

    public ClassDescription caption()
    {
        return "@EIP261:AX0209_0111";
    }

    public void getVoucherConsumptionsLine(EI_VoucherConsumptionLine _line)
    {
        line = _line;
    }

    public void run()
    {
        EI_VoucherConsumption       header;
        EI_VoucherConsumptionLine   lineNew;
        
        header = EI_VoucherConsumption::find(line.IdVoucherConsumption);
        try
        {
            ttsBegin;
            lineNew.clear();
            buf2Buf(line,lineNew);
            //<Actualiza estado de la línea actual>
            line.selectForUpdate(true);
            line.Status = EI_StatusVoucherComsumption::Register;
            line.Adjusted = NoYes::No;
            line.CanceledBalance = NoYes::Yes;
            line.CancellationDate = DateTimeUtil::date(DateTimeUtil::utcNow());
            line.AdjustedBy = curUserId();
            line.update();

            //<crea unalínea nueva>
            lineNew.Qty        = correctQty;
            lineNew.QtyReg     = 0;
            lineNew.Status     = EI_StatusVoucherComsumption::NoRegister;
            lineNew.Adjusted   = NoYes::Yes;
            lineNew.insert();
            ttsCommit;
        }
        catch
        {
            ttsAbort;
        }
    }

    static void main(Args args)
    {
        EI_VoucherConsumptionLine           line;
        EI_VoucherConsumptionCorrectLine    correctLine = new EI_VoucherConsumptionCorrectLine();

        if (args)
        {
            if (args.dataset() == tablenum(EI_VoucherConsumptionLine) && args.caller().name() == formstr(EI_VoucherConsumption))
            {
                line = args.record();
                correctLine.getVoucherConsumptionsLine(line);
                if (correctLine.prompt())
                {
                    correctLine.run();
                    line.dataSource().research(true);
                }
            }
            else
            {
                throw error("@EIP261:AX0209_0109");
            }
        }
    }

}

___________________________________________________

public class EI_VoucherConsumptionCancelLine extends RunBase
{
    Dialog                      dialog;
    DialogField                 dlgCancel;
    NoyesId                     cancelLine;
    EI_VoucherConsumptionLine   line;
 
    public Object dialog()
    {
        dialog = super();

        dlgCancel = dialog.addField(extendedTypeStr(noyesId),"@EIP261:AX0209_0107");

        return dialog;
    }

    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        cancelLine = dlgCancel.value();

        return ret;
    }

    public ClassDescription caption()
    {
        return "@EIP261:AX0209_0108";
    }

    public void getVoucherConsumptionsLine(EI_VoucherConsumptionLine _line)
    {
        line = _line;
    }

    public boolean setHeaderStatus(EI_IdVoucherConsumption _idVoucherConsumption)
    {
        EI_VoucherConsumption           voucherConsumption;
        EI_VoucherConsumptionLine       voucherConsumptionLine;
        EI_StatusVoucherComsumption     statusLine, statusHeader;
        int                             tnumReg     = 0;
        int                             tnumCancel  = 0;
        int                             tnumtotal   = 0;
        int                             tnumNoReg   = 0;
        int                             tnumPartReg = 0; 

        while select voucherConsumptionLine
            where voucherConsumptionLine.IdVoucherConsumption == _idVoucherConsumption
        {
            switch (voucherConsumptionLine.Status)
            {
                case EI_StatusVoucherComsumption::Register:
                    tnumReg ++;
                    break;

                case EI_StatusVoucherComsumption::Cancel:
                    tnumCancel ++;
                    break;
                
                case EI_StatusVoucherComsumption::NoRegister:
                    tnumNoReg ++;
                    break;

                case EI_StatusVoucherComsumption::PartialRegister:
                    tnumPartReg ++;
                    break;
            }

            tnumtotal ++;
        }

        if (tnumtotal > 0 )
        {
            if (tnumtotal == tnumCancel + tnumNoReg)
            {
                statusLine = EI_StatusVoucherComsumption::Cancel;
            }
            else
            {
                statusLine = EI_StatusVoucherComsumption::Register;
            }

            if(tnumtotal == tnumCancel)
            {
                statusHeader = EI_StatusVoucherComsumption::Cancel;
            }
            else
            {
                if(tnumNoReg > 0 || tnumPartReg > 0)
                {
                    statusHeader = EI_StatusVoucherComsumption::NoRegister;
                }
                else
                {
                    statusHeader = EI_StatusVoucherComsumption::Register;
                }
            }

            ttsBegin;
            select forupdate voucherConsumption
                where voucherConsumption.IdVoucherConsumption == _idVoucherConsumption;
            if (voucherConsumption.RecId!=0)
            {
                voucherConsumption.Status = statusHeader;
                voucherConsumption.doUpdate();
            }
            ttsCommit;
        }

        return statusLine;
    }

    public void run()
    {
        EI_IdVoucherConsumption     idVoucherConsumption;
        EI_StatusVoucherComsumption status;

        if (cancelLine == NoYes::Yes)
        {
            try
            {
                idVoucherConsumption = line.IdVoucherConsumption;
                
                ttsBegin;
                //<Actualiza estado de la línea actual>
                line.selectForUpdate(true);
                line.Status = EI_StatusVoucherComsumption::Cancel;
                line.update();

                status = this.setHeaderStatus(idVoucherConsumption);

                if(line.QtyReg > 0)
                {
                    line.Status = status;
                }
                
                line.Adjusted = NoYes::No;
                line.CanceledBalance = NoYes::Yes;
                line.CancellationDate = DateTimeUtil::date(DateTimeUtil::utcNow());
                line.AdjustedBy = curUserId();
                line.update();
                ttsCommit;

            }
            catch (Exception::Error)
            {
                ttsAbort;
            }
        }
    }

    static void main(Args args)
    {
        EI_VoucherConsumptionLine           line;
        EI_VoucherConsumptionCancelLine     cancelLine = new EI_VoucherConsumptionCancelLine();

        if (args)
        {
            if (args.dataset() == tablenum(EI_VoucherConsumptionLine) && args.caller().name() == formstr(EI_VoucherConsumption))
            {
                line = args.record();
                cancelLine.getVoucherConsumptionsLine(line);
                if (cancelLine.prompt())
                {
                    cancelLine.run();
                    line.dataSource().research(true);
                }
            }
            else
            {
                throw error("@EIP261:AX0209_0109");
            }
        }
    }

}
_____________________________________________



_______________________________________________________________________

