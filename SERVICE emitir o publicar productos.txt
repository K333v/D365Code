{
    "ReleaseList":
    [
        {
            "ProductID":"000173",
            "UnitSales":"Uni",
            "UnitPurch":"Uni",
            "UnitInvent":"Uni",
            "OverDeliveryPct": 10,
            "CompanyList":
            [
                {
                    "ReleaseCompanyId":"04"
                }
 
            ]
 
        }
    ]
}
_________________________________________________________

class UFT_ReleaseItemContract
{
    str                                 productId;
    List                                releaseCompanyList;
    UnitOfMeasureSymbol                 UnitSales,UnitPurch,UnitInvent;
    OverDeliveryPct                     OverDeliveryPct;


    /// </summary>
    /// <param name="productId"></param>
    [DataMemberAttribute('productId')]
    public str parmProductId(str _productId = productId)
    {
        productId = _productId;
        return productId;
    }

    /// </summary>
    /// <param name="UnitSales"></param>
    [DataMemberAttribute('UnitSales')]
    public UnitOfMeasureSymbol   parmUnitSales(UnitOfMeasureSymbol _UnitSales = UnitSales)
    {
        UnitSales = _UnitSales;
        
        return UnitSales;
    }

    /// </summary>
    /// <param name="UnitPurch"></param>
    [DataMemberAttribute('UnitPurch')]
    public UnitOfMeasureSymbol   parmUnitPurch(UnitOfMeasureSymbol _UnitPurch = UnitPurch)
    {
        UnitPurch = _UnitPurch;
        
        return UnitPurch;
    }

    /// </summary>
    /// <param name="UnitInvent"></param>
    [DataMemberAttribute('UnitInvent')]
    public UnitOfMeasureSymbol   parmUnitInvent(UnitOfMeasureSymbol _UnitInvent = UnitInvent)
    {
        UnitInvent = _UnitInvent;
        
        return UnitInvent;
    }

    /// </summary>
    /// <param name="OverDeliveryPct"></param>
    [DataMemberAttribute('OverDeliveryPct')]
    public OverDeliveryPct   parmOverDeliveryPct(OverDeliveryPct _OverDeliveryPct = OverDeliveryPct)
    {
        OverDeliveryPct = _OverDeliveryPct;
        
        return OverDeliveryPct;
    }

    [DataMemberAttribute('CompanyList'),
    AifCollectionType("CompanyList", Types::Class, classStr(UFT_ReleaseCompanyContract)),
    AifCollectionType("return", Types::Class, classStr(UFT_ReleaseCompanyContract))]
    public List parmReleaseCompanyList(List _releaseCompanyList = releaseCompanyList)
    {
        releaseCompanyList = _releaseCompanyList;
        return releaseCompanyList;
    }

}
_____________________________________________________________________

[Newtonsoft.Json.JsonObjectAttribute(IsReference = false)]
class UFT_ResponseServiceContract
{
    ItemId                              itemId;
    FreeTxt                             descrition;
    boolean                             status;

    [DataMemberAttribute('Status')]
    public boolean parmStatus(boolean _status = status)
    {
        status = _status;
        return status;
    }

    [DataMemberAttribute('itemId')]
    public itemId parmItemId(itemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

    [DataMemberAttribute('descrition')]
    public FreeTxt parmDescrition(FreeTxt _descrition = descrition)
    {
        descrition = _descrition;
        return descrition;
    }

}

____________________________________________________________

class UFT_ReleaseItemService
{
      
   




    [AifCollectionTypeAttribute('ReleaseList', Types::Class, classStr(UFT_ReleaseItemContract)),
        AifCollectionTypeAttribute('return', Types::Class, classStr(UFT_ResponseServiceContract))]
    public List UFT_ReleaseProductService(List ReleaseList)
    {
        List                                response = new List(Types::Class);
        System.Exception                    generalEx;
        SysInfoLogEnumerator                infoLogEnum;
        SysInfologMessageStruct             infoMessageStruct;
        str                                 infoerror;
        UFT_ResponseServiceContract         responseContract,getresponse;
        UFT_ReleaseItemContract             contract;
        ListEnumerator                      keysEnumerator,responseEnumerator;

        keysEnumerator = ReleaseList.getEnumerator();

        while(keysEnumerator.moveNext())
        {
            contract = keysEnumerator.current();

            try
            {
                ttsBegin;
                response = UFT_ReleaseProcess::validateItems(contract);
                responseEnumerator = response.getEnumerator();
                if(!response.elements())
                {
                    response = UFT_ReleaseProcess::ReleaseItem(contract);
                    responseEnumerator = response.getEnumerator();
                    while(responseEnumerator.moveNext())
                    {
                        getresponse = responseEnumerator.current();
                        UFT_ReleaseItemService::insertLog(UFTIntegrationType::ReleaseProduct,UFTIntegrationStatus::Processed, getresponse.parmDescrition());
                    }
                   
                }
                else
                {
                    responseEnumerator = response.getEnumerator();
                    while(responseEnumerator.moveNext())
                    {
                        getresponse = responseEnumerator.current();
                        UFT_ReleaseItemService::insertLog(UFTIntegrationType::ReleaseProduct,UFTIntegrationStatus::Error, getresponse.parmDescrition());
                    }
                }
                ttscommit;
            }
            catch (generalEx)
            {
                infoLogEnum = SysInfoLogEnumerator::newData(infolog.infologData());
                while(infoLogEnum.moveNext())
                {
                    infoMessageStruct = SysInfologMessageStruct::construct(infoLogEnum.currentMessage());
                    infoerror += infoMessageStruct.message() + ' ';
                    responseContract = new UFT_ResponseServiceContract();
                    responseContract.parmStatus(false);
                    responseContract.parmDescrition(strFmt('%1',infoerror));
                    response.addEnd(responseContract);
                    UFT_ReleaseItemService::insertLog(UFTIntegrationType::ReleaseProduct,UFTIntegrationStatus::Error, responseContract.parmDescrition());
                }
                ttsabort;
            }
        }
        return response;
    }

    public static void  insertLog(UFTIntegrationType  _integrationType, UFTIntegrationStatus _integrationStatus, str _message)
    {
        UFTIntegrationProcessingLog     integrationProcessingLog;

        integrationProcessingLog.IntegrationType = _integrationType;
        integrationProcessingLog.IntegrationStatus = _integrationStatus;
        integrationProcessingLog.ProcessDateTime = DateTimeUtil::utcNow();
        integrationProcessingLog.ExternalApplication = UFTIntegrationExternalApplicationType::Phoenix;
        integrationProcessingLog.Message = _message;
        integrationProcessingLog.insert();
    }

}
_______________________________________________________________________


class UFT_ReleaseProcess
{



    public static List  validateItems(UFT_ReleaseItemContract _contract)
    {
        List                                    response = new List(Types::Class) ;
        ListEnumerator                          keysCompany;
        List                                    releaseList = new List(Types::Class) ;
        UFT_ReleaseCompanyContract              companyContract;
        CompanyId                               companyProcess;
        UFT_ResponseServiceContract             responseContract;
        EcoResProductV2Entity                   ecoResProductEntity;
        UnitOfMeasure                           UnitOfMeasure;
        InventParameters                        inventParameters;

        select ecoResProductEntity
            where ecoResProductEntity.ProductNumber == _contract.parmProductId();

        if(!ecoResProductEntity)
        {

            responseContract = new UFT_ResponseServiceContract();
            responseContract.parmStatus(false);
            responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0018",_contract.parmProductId()));
            response.addEnd(responseContract);
           
        }
        if(!ecoResProductEntity.UFT_Integration && ecoResProductEntity )
        {
            responseContract = new UFT_ResponseServiceContract();
            responseContract.parmStatus(false);
            responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0019",_contract.parmProductId()));
            response.addEnd(responseContract);
        }

        UnitOfMeasure = UnitOfMeasure::findBySymbol(_contract.parmUnitSales());
        if(!UnitOfMeasure)
        {
            responseContract = new  UFT_ResponseServiceContract();
            responseContract.parmStatus(false);
            responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0017",_contract.parmUnitSales(),_contract.parmProductId(),'Ventas'));
            response.addEnd(responseContract);

        }

        UnitOfMeasure = UnitOfMeasure::findBySymbol(_contract.parmUnitPurch());
        if(!UnitOfMeasure)
        {
            responseContract = new  UFT_ResponseServiceContract();
            responseContract.parmStatus(false);
            responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0017",_contract.parmUnitPurch(),_contract.parmProductId(),'Compra'));
            response.addEnd(responseContract);

        }

        UnitOfMeasure = UnitOfMeasure::findBySymbol(_contract.parmUnitInvent());
        if(!UnitOfMeasure)
        {
            responseContract = new  UFT_ResponseServiceContract();
            responseContract.parmStatus(false);
            responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0017",_contract.parmUnitInvent(),_contract.parmProductId(),'Inventario'));
            response.addEnd(responseContract);

        }
         if(!_contract.parmOverDeliveryPct())
        {
            responseContract = new UFT_ResponseServiceContract();
            responseContract.parmStatus(false);
            responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0024",'Permitido en exceso'));
            response.addEnd(responseContract);
        }

        releaseList = _contract.parmReleaseCompanyList();
        keysCompany = releaseList.getEnumerator();


        while(keysCompany.moveNext())
        {
            companyContract = keysCompany.current();
            companyProcess =  UFTCompanyMapping::findByExternalCompany(companyContract.parmCompanyId()).LegalEntityD365;
            if(!companyProcess)
            {
                responseContract = new UFT_ResponseServiceContract();
                responseContract.parmStatus(false);
                responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0002", companyContract.parmCompanyId()));
                response.addEnd(responseContract);
            }
            else
            {
                changecompany(companyProcess)
                {
             
                    inventParameters = InventParameters::find();
                    if(!inventParameters.UFT_StorageDimensionGroupName)
                    {
                        responseContract = new UFT_ResponseServiceContract();
                        responseContract.parmStatus(false);
                        responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0010",inventParameters.UFT_StorageDimensionGroupName,_contract.parmProductId()));
                        response.addEnd(responseContract);
                    }
                    if(!inventParameters.UFT_InventLocationId)
                    {
                        responseContract = new UFT_ResponseServiceContract();
                        responseContract.parmStatus(false);
                        responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0013",'@SYS6437'));
                        response.addEnd(responseContract);
                    }
                    if(!inventParameters.UFT_ItemGroupId)
                    {
                        responseContract = new UFT_ResponseServiceContract();
                        responseContract.parmStatus(false);
                        responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001_0013",'@SYS53818'));
                        response.addEnd(responseContract);
                    }
                }
            }

        }
        return response;
    }

    public static  List ReleaseItem(UFT_ReleaseItemContract _contract)
    {
        #OCCRetryCount
        
        EcoResProductV2Entity                   ecoResProductEntity;
        ListEnumerator                          keysCompany;
        List                                    releaseList = new List(Types::Class) ;
        UFT_ReleaseCompanyContract              companyContract;
        CompanyId                               companyProcess;
        InventTableModule                       inventTableModule;
        UFT_ResponseServiceContract             responseContract;
        List                                    response = new List(Types::Class) ;
        InventModelGroupItem                    inventModelGroupItem;
        InventParameters                        inventParameters;
        inventDim                               inventDim;
        InventItemInventSetup                   inventItemInventSetup;
        InventItemPurchSetup                    inventItemPurchSetup;
        InventItemSalesSetup                    inventItemSalesSetup;

        try
        {
            ttsbegin;
            select ecoResProductEntity
            where ecoResProductEntity.ProductNumber == _contract.parmProductId();

            releaseList = _contract.parmReleaseCompanyList();
            keysCompany = releaseList.getEnumerator();

            while(keysCompany.moveNext())
            {
                companyContract = keysCompany.current();
                companyProcess =  UFTCompanyMapping::findByExternalCompany(companyContract.parmCompanyId()).LegalEntityD365;
                        
                changecompany (companyProcess)
                {
                    inventItemInventSetup = null;
                    inventItemPurchSetup = null;
                    inventItemSalesSetup = null;
                    inventParameters = null; 

                    inventParameters = InventParameters::find();
                    UFT_ReleaseProcess::ReleaseItemCompany(ecoResProductEntity.ProductNumber,companyProcess);
                    InventTable inventTable = null;

                    select crosscompany inventTable
                      where inventTable.ItemId == ecoResProductEntity.ProductNumber &&
                    inventTable.DataAreaId == companyProcess ;

                    
                    if(!UFT_ReleaseProcess::validateWriteOnInventTable(inventTable,_contract))
                    {
                        SysInfoLogEnumerator                infoLogEnum;
                        SysInfologMessageStruct             infoMessageStruct;

                        infoLogEnum = SysInfoLogEnumerator::newData(infolog.infologData());
                        str errorComlpete;
                        while(infoLogEnum.moveNext())
                        {
                            infoMessageStruct = SysInfologMessageStruct::construct(infoLogEnum.currentMessage());
                            errorComlpete += infoMessageStruct.message();

                        }
                        infolog.clear();
                        throw Global::error(strFmt(" %1 Error con validaciones al crear producto %2",errorComlpete , _contract.parmProductId()));
                    }

                    inventTable.selectForUpdate(true);
                    inventTable.PurchModel = NoYes::Yes;
                    inventTable.CostModel = NoYes::Yes;
                    inventTable.doUpdate();

                    InventLocation InventLocation = InventLocation::find(inventParameters.UFT_InventLocationId);
                    inventDim.initValue();
                    inventDim.InventSiteId = InventLocation.InventSiteId;
                    inventDim.inventLocationId = inventParameters.UFT_InventLocationId;
                    inventDim = InventDim::findOrCreate(inventDim);

                    ttsbegin;
                   
                    select crosscompany inventItemInventSetup
                        where inventItemInventSetup.ItemId == inventTable.ItemId  &&
                        inventItemInventSetup.DataAreaId == companyProcess;
                    
                    if(inventItemInventSetup)
                    {
                        inventItemInventSetup.selectForUpdate(true);
                        inventItemInventSetup.ItemId                = inventTable.ItemId;
                        inventItemInventSetup.InventDimIdDefault    = inventDim.inventDimId;
                        inventItemInventSetup.update();
                    }
                    select crosscompany inventItemPurchSetup
                        where inventItemPurchSetup.ItemId == inventTable.ItemId &&
                        inventItemPurchSetup.DataAreaId == companyProcess;
                    
                    if(inventItemPurchSetup)
                    {
                        inventItemPurchSetup.selectForUpdate(true);
                        inventItemPurchSetup.ItemId                = inventTable.ItemId;
                        inventItemPurchSetup.InventDimIdDefault    = inventDim.inventDimId;
                        inventItemPurchSetup.update();
                    }
                    select crosscompany inventItemSalesSetup
                        where inventItemSalesSetup.ItemId == inventTable.ItemId &&
                        inventItemSalesSetup.DataAreaId == companyProcess;
                    
                    if(inventItemSalesSetup)
                    {
                        inventItemSalesSetup.selectForUpdate(true);
                        inventItemSalesSetup.ItemId                = inventTable.ItemId;
                        inventItemSalesSetup.InventDimIdDefault    = inventDim.inventDimId;
                        inventItemSalesSetup.update();
                    }
                    ttscommit;

                    if(_contract.parmUnitInvent())
                    {
                        select  crosscompany  inventTableModule
                        where inventTableModule.ItemId      == inventTable.ItemId
                        && inventTableModule.ModuleType  == ModuleInventPurchSales::Invent &&
                        inventTableModule.DataAreaId == companyProcess;
                        if(inventTableModule)
                        {
                            inventTableModule.selectForUpdate(true);
                            inventTableModule.UnitId =  _contract.parmUnitInvent();
                            inventTableModule.update();
                        }
                    }

                    select  crosscompany inventTableModule
                    where inventTableModule.ItemId      == inventTable.ItemId
                    && inventTableModule.ModuleType  == ModuleInventPurchSales::Purch &&
                    inventTableModule.DataAreaId == companyProcess;
                    if(inventTableModule)
                    {
                        inventTableModule.selectForUpdate(true);
                        if(_contract.parmUnitPurch())
                                    inventTableModule.UnitId =  _contract.parmUnitPurch();
                        if(_contract.parmOverDeliveryPct())
                                    inventTableModule.OverDeliveryPct =  _contract.parmOverDeliveryPct();
                        inventTableModule.update();
                    }

                            
                    if(_contract.parmUnitSales())
                    {
                        select  crosscompany inventTableModule
                        where inventTableModule.ItemId      == inventTable.ItemId
                        && inventTableModule.ModuleType  == ModuleInventPurchSales::Sales &&
                        inventTableModule.DataAreaId == companyProcess;
                        if(inventTableModule)
                        {
                            inventTableModule.selectForUpdate(true);
                            inventTableModule.UnitId =  _contract.parmUnitSales();
                            inventTableModule.update();
                        }
                    }
                    //Inventory model group
                    if(!inventModelGroupItem::findByItemIdLegalEntity(inventTable.ItemId,inventTable.DataAreaId))
                    {
                        inventModelGroupItem.clear();
                        inventModelGroupItem.initValue();
                        inventModelGroupItem.ItemDataAreaId = inventTable.dataAreaId;
                        inventModelGroupItem.ItemId = inventTable.ItemId;
                        inventModelGroupItem.ModelGroupId = inventParameters.UFT_ItemGroupId;
                        inventModelGroupItem.ModelGroupDataAreaId = curext();
                        inventModelGroupItem.insert();
                    }

                    if(inventTable)
                    {
                        responseContract = new  UFT_ResponseServiceContract();
                        responseContract.parmStatus(true);
                        responseContract.parmDescrition(strFmt("@UFINET_AP:GIP001B_0002",_contract.parmProductId(),companyProcess));
                        response.addEnd(responseContract);
                    }

                    
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {

            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    ttsabort;
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    ttsabort;
                    retry;
                }
            }
            else
            {
                ttsabort;
                throw Exception::UpdateConflict;
            }
        }

        return response;
    }

    public static InventTable ReleaseItemCompany(ItemId      _ItemId,CompanyId  _companyProcess)
    {
        EcoResProduct                           ecoResProduct;
        InventTable                             inventTable;
        EcoResProductMaster                     ecoResProductMaster;
        CompanyInfo                             companyInfo = CompanyInfo::find();
        ;
       
        select firstOnly ecoResProduct
            where EcoResProduct.DisplayProductNumber == _ItemId;
        select ecoResProductMaster
            where ecoResProductMaster.DisplayProductNumber == _ItemId;

        EcoResProductReleaseManagerBase::releaseProduct(ecoResProduct.RecId,CompanyInfo::findDataArea(_companyProcess).RecId);

        inventTable = InventTable::find(_ItemId);
        
        return inventTable;

    }

    private static boolean validateWriteOnInventTable(InventTable  _inventtable,UFT_ReleaseItemContract _contract)
    {
        boolean             ret = true;
        InventTableModule   inventTableInventModule;
        InventTableModule   inventTablePurchModule;
        InventTableModule   inventTableSalesModule;
        InventModelGroupItem   inventModelGroupItem;
        #ISOCountryRegionCodes

        infolog.clear();
        EcoResReleasedProduct ecoResReleasedProduct = EcoResReleasedProduct::construct();

        ecoResReleasedProduct.parmInventTable(_inventtable);

        inventTableInventModule = InventTableModule::find(_inventtable.ItemId, ModuleInventPurchSales::Invent);
        inventTableInventModule.UnitId = _contract.parmUnitInvent();
        ecoResReleasedProduct.parmInventTableModuleInvent(inventTableInventModule);

        inventTablePurchModule = InventTableModule::find(_inventtable.ItemId, ModuleInventPurchSales::Purch);
        inventTablePurchModule.UnitId =  _contract.parmUnitPurch();
        ecoResReleasedProduct.parmInventTableModulePurch(inventTablePurchModule);

        inventTableSalesModule = InventTableModule::find(_inventtable.ItemId, ModuleInventPurchSales::Sales);
        inventTableSalesModule.UnitId =  _contract.parmUnitSales();
        ecoResReleasedProduct.parmInventTableModuleSales(inventTableSalesModule);

        ecoResReleasedProduct.parmUnitOfMeasureConverter(UnitOfMeasureConverter_Product::construct());
        ecoResReleasedProduct.parmInventModelTypeFactory(InventModelTypeFactory::construct());


        //secoResReleasedProduct.checkAndUpdateNonStockedDependencies();
        ret = ret && ecoResReleasedProduct.UFT_validateUnitConversionPurch();
        ret = ret && ecoResReleasedProduct.UFT_validateUnitConversionSales();

        return ret;

    }

}