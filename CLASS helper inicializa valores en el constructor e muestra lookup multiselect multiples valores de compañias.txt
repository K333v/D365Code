/// <summary>
/// The <c>VendInvoiceListFilterHelper</c> class manages company filtering for a given form for Vendor invoicing.
/// </summary>
public class AP_DTEReceivedListHelper
{
    private FormDataSource filterDataSource;
    private FormStringControl companyFilterControl;
    private FormStringControl companyGridColumnControl;
    private SysLookupMultiSelectCtrl companyLookupControl;
    private container userCompanies;

    /// <summary>
    /// Adds selected companies from the multi-select control to the company range of the
    /// provided form data source query.
    /// </summary>
    public void addSelectedCompaniesToDataSourceRange()
    {
        Debug::assert(companyLookupControl != null);

        container accessibleCompanies = this.selectedCompanyRecIdsToDataAreas(companyLookupControl.get());

        Query dataSourceQuery = filterDataSource.query();
        dataSourceQuery.clearCompanyRange();

        for (int i = 1; i <= conLen(accessibleCompanies); i++)
        {
            dataSourceQuery.addCompanyRange(conPeek(accessibleCompanies, i));
        }
    }

    private container selectedCompanyRecIdsToDataAreas(container _companyRecIds)
    {
        container companies;

        DataAreaId company;

        for (int i = 1; i <= conLen(_companyRecIds); i++)
        {
            company = CompanyInfo::findRecId(conPeek(_companyRecIds, i)).DataArea;

            if (company == '')
            {
                company = curExt();
            }

            companies += company;
        }

        return companies;
    }

    /// <summary>
    /// Gets the currently selected companies from the lookup control.
    /// </summary>
    /// <returns>A container with the values of the currently selected companies from the lookup control</returns>
    public container getSelectedFilterCriteria()
    {
        return [companyLookupControl.get(), this.selectedCompanyRecIdsToDataAreas(companyLookupControl.get())];
    }

    /// <summary>
    /// Gets or set the container of companies that the current user has access to.
    /// </summary>
    /// <param name = "_userCompanies">The companies that the current user has access to</param>
    /// <returns>A container of companies that the current user has access to</returns>
    public container parmUserCompanies(container _userCompanies = userCompanies)
    {
        if (!prmIsDefault(_userCompanies))
        {
            userCompanies = _userCompanies;
        }
        else if (userCompanies == conNull())
        {
            MyLegalEntities myLegalEntities;

            while select myLegalEntities
            {
                userCompanies += myLegalEntities.DataArea;
            }
        }

        return userCompanies;
    }

    /// <summary>
    /// Sets the visibility of the company controls on the form.
    /// </summary>
    public void setCompanyControlsVisibility()
    {
        boolean isVisible = conLen(this.parmUserCompanies()) > 1;

        companyFilterControl.visible(isVisible);
        companyGridColumnControl.visible(isVisible);
    }

    private void initCompanyMultiSelectLookup()
    {
        Query companyQuery = new Query();

        QueryBuildDataSource companyDataSource = companyQuery.addDataSource(tableNum(CompanyInfo));
        companyDataSource.addSelectionField(fieldNum(CompanyInfo, DataArea));
        companyDataSource.addSelectionField(fieldNum(CompanyInfo, Name));
        companyDataSource.addOrderByField(fieldNum(CompanyInfo, DataArea));

        for (int i = 1; i <= conLen(this.parmUserCompanies()); i++)
        {
            companyDataSource.addRange(fieldNum(CompanyInfo, DataArea)).value(conPeek(this.parmUserCompanies(), i));
        }

        companyLookupControl = SysLookupMultiSelectCtrl::constructWithQuery(
            filterDataSource.formRun(),
            companyFilterControl,
            companyQuery,
            true);

        companyLookupControl.set([CompanyInfo::current(), curExt()]);
    }

    /// <summary>
    /// Add company criteria to the existing lookup control.
    /// </summary>
    /// <param name = "_companyCriteria">The container of companies to add to the lookup selection</param>
    public void addCompanyCriteria(container _companyCriteria)
    {
        companyLookupControl.set(_companyCriteria);
    }

    protected void new()
    {
        super();
    }

    /// <summary>
    /// Constructs and initializes an instance of the <c>AP_DTEReceivedListHelper</c> class.
    /// </summary
    /// <param name = "_filterDataSource">The data source to perform company filtering on.</param>
    /// <param name = "_companyFilterControl">The custom company filter control.</param>
    /// <param name = "_companyGridColumnControl">The company grid column on the form.</param>
    /// <returns>An instance of the <c>VendInvoiceListFilterHelper</c> class.</returns>
    public static AP_DTEReceivedListHelper construct(FormDataSource _filterDataSource, FormStringControl _companyFilterControl, FormStringControl _companyGridColumnControl)
    {
        AP_DTEReceivedListHelper helper = new AP_DTEReceivedListHelper();

        helper.filterDataSource = _filterDataSource;
        helper.companyFilterControl = _companyFilterControl;
        helper.companyGridColumnControl = _companyGridColumnControl;

        helper.initCompanyMultiSelectLookup();

        return helper;
    }

}